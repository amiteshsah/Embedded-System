
type_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000232  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000099  00000000  00000000  000002a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000051e  00000000  00000000  0000033f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001b9  00000000  00000000  0000085d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000042f  00000000  00000000  00000a16  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000c0  00000000  00000000  00000e48  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000012f  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000102  00000000  00000000  00001037  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  8a:	0c 94 17 01 	jmp	0x22e	; 0x22e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <cmd_LCD>:
}
return 0;
}

void cmd_LCD(unsigned char xyz)
{ 
  92:	85 bb       	out	0x15, r24	; 21
	LCD_data_cntrl=xyz;
	LCD_data_cntrl &=~ (1<<rs);
  94:	a8 98       	cbi	0x15, 0	; 21
	LCD_data_cntrl &=~ (1<<rw);
  96:	a9 98       	cbi	0x15, 1	; 21
	LCD_data_cntrl |= (1<<en);
  98:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	80 ed       	ldi	r24, 0xD0	; 208
  9c:	97 e0       	ldi	r25, 0x07	; 7
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <cmd_LCD+0xc>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
  a2:	aa 98       	cbi	0x15, 2	; 21
}
  a4:	08 95       	ret

000000a6 <write_LCD>:


void write_LCD(unsigned char abc)
{
  a6:	85 bb       	out	0x15, r24	; 21

	LCD_data_cntrl=abc;
	LCD_data_cntrl |= (1<<rs);
  a8:	a8 9a       	sbi	0x15, 0	; 21
	LCD_data_cntrl &=~ (1<<rw);
  aa:	a9 98       	cbi	0x15, 1	; 21
	LCD_data_cntrl |= (1<<en);
  ac:	aa 9a       	sbi	0x15, 2	; 21
  ae:	80 ed       	ldi	r24, 0xD0	; 208
  b0:	97 e0       	ldi	r25, 0x07	; 7
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <write_LCD+0xc>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
  b6:	aa 98       	cbi	0x15, 2	; 21
}
  b8:	08 95       	ret

000000ba <dis_cmd>:


void dis_cmd(unsigned char cmd)
{ 
  ba:	28 2f       	mov	r18, r24
  bc:	20 7f       	andi	r18, 0xF0	; 240
return 0;
}

void cmd_LCD(unsigned char xyz)
{ 
	LCD_data_cntrl=xyz;
  be:	25 bb       	out	0x15, r18	; 21
	LCD_data_cntrl &=~ (1<<rs);
  c0:	a8 98       	cbi	0x15, 0	; 21
	LCD_data_cntrl &=~ (1<<rw);
  c2:	a9 98       	cbi	0x15, 1	; 21
	LCD_data_cntrl |= (1<<en);
  c4:	aa 9a       	sbi	0x15, 2	; 21
  c6:	20 ed       	ldi	r18, 0xD0	; 208
  c8:	37 e0       	ldi	r19, 0x07	; 7
  ca:	f9 01       	movw	r30, r18
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <dis_cmd+0x12>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
  d0:	aa 98       	cbi	0x15, 2	; 21
void dis_cmd(unsigned char cmd)
{ 
unsigned char cmd1;
cmd1 = (cmd&0xf0);
cmd_LCD(cmd1);
cmd1 = ((cmd<<4)&0xf0);
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	44 e0       	ldi	r20, 0x04	; 4
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	4a 95       	dec	r20
  dc:	e1 f7       	brne	.-8      	; 0xd6 <dis_cmd+0x1c>
return 0;
}

void cmd_LCD(unsigned char xyz)
{ 
	LCD_data_cntrl=xyz;
  de:	85 bb       	out	0x15, r24	; 21
	LCD_data_cntrl &=~ (1<<rs);
  e0:	a8 98       	cbi	0x15, 0	; 21
	LCD_data_cntrl &=~ (1<<rw);
  e2:	a9 98       	cbi	0x15, 1	; 21
	LCD_data_cntrl |= (1<<en);
  e4:	aa 9a       	sbi	0x15, 2	; 21
  e6:	c9 01       	movw	r24, r18
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <dis_cmd+0x2e>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
  ec:	aa 98       	cbi	0x15, 2	; 21
  ee:	c9 01       	movw	r24, r18
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <dis_cmd+0x36>
cmd1 = (cmd&0xf0);
cmd_LCD(cmd1);
cmd1 = ((cmd<<4)&0xf0);
cmd_LCD(cmd1);
_delay_ms(1);
}
  f4:	08 95       	ret

000000f6 <dis_write>:


void dis_write(unsigned char write)
{ 
  f6:	28 2f       	mov	r18, r24
  f8:	20 7f       	andi	r18, 0xF0	; 240


void write_LCD(unsigned char abc)
{

	LCD_data_cntrl=abc;
  fa:	25 bb       	out	0x15, r18	; 21
	LCD_data_cntrl |= (1<<rs);
  fc:	a8 9a       	sbi	0x15, 0	; 21
	LCD_data_cntrl &=~ (1<<rw);
  fe:	a9 98       	cbi	0x15, 1	; 21
	LCD_data_cntrl |= (1<<en);
 100:	aa 9a       	sbi	0x15, 2	; 21
 102:	20 ed       	ldi	r18, 0xD0	; 208
 104:	37 e0       	ldi	r19, 0x07	; 7
 106:	f9 01       	movw	r30, r18
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <dis_write+0x12>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
 10c:	aa 98       	cbi	0x15, 2	; 21
void dis_write(unsigned char write)
{ 
unsigned char write1;
write1 = (write&0xf0);
write_LCD(write1);
write1 = ((write<<4)&0xf0);
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	54 e0       	ldi	r21, 0x04	; 4
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	5a 95       	dec	r21
 118:	e1 f7       	brne	.-8      	; 0x112 <dis_write+0x1c>


void write_LCD(unsigned char abc)
{

	LCD_data_cntrl=abc;
 11a:	85 bb       	out	0x15, r24	; 21
	LCD_data_cntrl |= (1<<rs);
 11c:	a8 9a       	sbi	0x15, 0	; 21
	LCD_data_cntrl &=~ (1<<rw);
 11e:	a9 98       	cbi	0x15, 1	; 21
	LCD_data_cntrl |= (1<<en);
 120:	aa 9a       	sbi	0x15, 2	; 21
 122:	c9 01       	movw	r24, r18
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <dis_write+0x2e>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
 128:	aa 98       	cbi	0x15, 2	; 21
 12a:	c9 01       	movw	r24, r18
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <dis_write+0x36>
write1 = (write&0xf0);
write_LCD(write1);
write1 = ((write<<4)&0xf0);
write_LCD(write1);
_delay_ms(1);
}
 130:	08 95       	ret

00000132 <string_LCD>:

void string_LCD(unsigned char *str)
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	ec 01       	movw	r28, r24
 138:	02 c0       	rjmp	.+4      	; 0x13e <string_LCD+0xc>
	int i;
	
	for(i=0;str[i]!='\0';i++) 
	{	dis_write(str[i]);
 13a:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_write>

void string_LCD(unsigned char *str)
{
	int i;
	
	for(i=0;str[i]!='\0';i++) 
 13e:	89 91       	ld	r24, Y+
 140:	88 23       	and	r24, r24
 142:	d9 f7       	brne	.-10     	; 0x13a <string_LCD+0x8>
	{	dis_write(str[i]);
	 	
  	}
	return 0;
	}
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <lcd_init>:


void lcd_init(void)
{
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
	
	dis_cmd(0x02);
	dis_cmd(0x28);
 150:	88 e2       	ldi	r24, 0x28	; 40
 152:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
	dis_cmd(0x0c);
 156:	8c e0       	ldi	r24, 0x0C	; 12
 158:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
	dis_cmd(0x01);
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
}
 162:	08 95       	ret

00000164 <main>:
unsigned int getcha(void);



int main()
{
 164:	ff 92       	push	r15
 166:	0f 93       	push	r16
 168:	1f 93       	push	r17
unsigned int x;
DDRD=0xFF;
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	81 bb       	out	0x11, r24	; 17
DDRC=0XFF;
 16e:	84 bb       	out	0x14, r24	; 20
lcd_init();
 170:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_init>
{
	UCSRB |= (1 << RXEN)|(1<<TXEN);   // Turn on the transmission and reception circuitry
	UCSRC |= (1 << URSEL) | (1<<USBS) | (1 << UCSZ0) | (1 << UCSZ1); 
											// Use 8-bit character sizes
 
	UBRRL = BAUD_PRESCALE; 
 174:	6f e9       	ldi	r22, 0x9F	; 159
 176:	f6 2e       	mov	r15, r22
			// Load lower 8-bits of the baud rate value into the low byte of the UBRR register
	UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value..
 178:	01 e0       	ldi	r16, 0x01	; 1
	dis_cmd(0x06);// for again incrementing the cursor position
}

void init()
{
	UCSRB |= (1 << RXEN)|(1<<TXEN);   // Turn on the transmission and reception circuitry
 17a:	8a b1       	in	r24, 0x0a	; 10
 17c:	88 61       	ori	r24, 0x18	; 24
 17e:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1<<USBS) | (1 << UCSZ0) | (1 << UCSZ1); 
 180:	80 b5       	in	r24, 0x20	; 32
 182:	8e 68       	ori	r24, 0x8E	; 142
 184:	80 bd       	out	0x20, r24	; 32
											// Use 8-bit character sizes
 
	UBRRL = BAUD_PRESCALE; 
 186:	f9 b8       	out	0x09, r15	; 9
			// Load lower 8-bits of the baud rate value into the low byte of the UBRR register
	UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value..
 188:	00 bd       	out	0x20, r16	; 32
									// into the high byte of the UBRR register
}
 
unsigned int getcha()
{	unsigned int ret;
	while ((UCSRA & (1 << RXC)) == 0); 
 18a:	5f 9b       	sbis	0x0b, 7	; 11
 18c:	fe cf       	rjmp	.-4      	; 0x18a <main+0x26>
	{	
	}	// Do nothing until data has been received and is ready to be read from UDR
	
	return UDR; // return the byte
 18e:	1c b1       	in	r17, 0x0c	; 12
}
 

void putcha(unsigned char send)
{	while(!(UCSRA & (1<<UDRE)))
 190:	5d 9b       	sbis	0x0b, 5	; 11
 192:	fe cf       	rjmp	.-4      	; 0x190 <main+0x2c>
   {
   }
   UDR=send;
 194:	1c b9       	out	0x0c, r17	; 12
x=getcha();
putcha(x);



dis_cmd(0x82);
 196:	82 e8       	ldi	r24, 0x82	; 130
 198:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
dis_write(x);
 19c:	81 2f       	mov	r24, r17
 19e:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_write>
 1a2:	eb cf       	rjmp	.-42     	; 0x17a <main+0x16>

000001a4 <LCD_number>:
	dis_cmd(0x0c);
	dis_cmd(0x01);
}

void LCD_number(unsigned int value)
{	dis_cmd(0x04);//for decrementing the cursor position
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	ec 01       	movw	r28, r24
 1aa:	84 e0       	ldi	r24, 0x04	; 4
 1ac:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
 1b0:	0e c0       	rjmp	.+28     	; 0x1ce <LCD_number+0x2a>
	unsigned int a=0;
	while(value!=0)
	{	a=value%10;
		dis_write(a+48);
 1b2:	ce 01       	movw	r24, r28
 1b4:	6a e0       	ldi	r22, 0x0A	; 10
 1b6:	70 e0       	ldi	r23, 0x00	; 0
 1b8:	0e 94 03 01 	call	0x206	; 0x206 <__udivmodhi4>
 1bc:	80 5d       	subi	r24, 0xD0	; 208
 1be:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_write>
		value=value/10;
 1c2:	ce 01       	movw	r24, r28
 1c4:	6a e0       	ldi	r22, 0x0A	; 10
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	0e 94 03 01 	call	0x206	; 0x206 <__udivmodhi4>
 1cc:	eb 01       	movw	r28, r22
}

void LCD_number(unsigned int value)
{	dis_cmd(0x04);//for decrementing the cursor position
	unsigned int a=0;
	while(value!=0)
 1ce:	20 97       	sbiw	r28, 0x00	; 0
 1d0:	81 f7       	brne	.-32     	; 0x1b2 <LCD_number+0xe>
	{	a=value%10;
		dis_write(a+48);
		value=value/10;
	}
	dis_cmd(0x06);// for again incrementing the cursor position
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
}
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <init>:

void init()
{
 1de:	8a b1       	in	r24, 0x0a	; 10
 1e0:	88 61       	ori	r24, 0x18	; 24
 1e2:	8a b9       	out	0x0a, r24	; 10
	UCSRB |= (1 << RXEN)|(1<<TXEN);   // Turn on the transmission and reception circuitry
	UCSRC |= (1 << URSEL) | (1<<USBS) | (1 << UCSZ0) | (1 << UCSZ1); 
 1e4:	80 b5       	in	r24, 0x20	; 32
 1e6:	8e 68       	ori	r24, 0x8E	; 142
 1e8:	80 bd       	out	0x20, r24	; 32
											// Use 8-bit character sizes
 
	UBRRL = BAUD_PRESCALE; 
 1ea:	8f e9       	ldi	r24, 0x9F	; 159
 1ec:	89 b9       	out	0x09, r24	; 9
			// Load lower 8-bits of the baud rate value into the low byte of the UBRR register
	UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value..
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	80 bd       	out	0x20, r24	; 32
									// into the high byte of the UBRR register
}
 1f2:	08 95       	ret

000001f4 <getcha>:
 
unsigned int getcha()
{	unsigned int ret;
 1f4:	5f 9b       	sbis	0x0b, 7	; 11
 1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <getcha>
	while ((UCSRA & (1 << RXC)) == 0); 
	{	
	}	// Do nothing until data has been received and is ready to be read from UDR
	
	return UDR; // return the byte
 1f8:	8c b1       	in	r24, 0x0c	; 12
}
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	08 95       	ret

000001fe <putcha>:
 

void putcha(unsigned char send)
{	while(!(UCSRA & (1<<UDRE)))
 1fe:	5d 9b       	sbis	0x0b, 5	; 11
 200:	fe cf       	rjmp	.-4      	; 0x1fe <putcha>
   {
   }
   UDR=send;
 202:	8c b9       	out	0x0c, r24	; 12
}
 204:	08 95       	ret

00000206 <__udivmodhi4>:
 206:	aa 1b       	sub	r26, r26
 208:	bb 1b       	sub	r27, r27
 20a:	51 e1       	ldi	r21, 0x11	; 17
 20c:	07 c0       	rjmp	.+14     	; 0x21c <__udivmodhi4_ep>

0000020e <__udivmodhi4_loop>:
 20e:	aa 1f       	adc	r26, r26
 210:	bb 1f       	adc	r27, r27
 212:	a6 17       	cp	r26, r22
 214:	b7 07       	cpc	r27, r23
 216:	10 f0       	brcs	.+4      	; 0x21c <__udivmodhi4_ep>
 218:	a6 1b       	sub	r26, r22
 21a:	b7 0b       	sbc	r27, r23

0000021c <__udivmodhi4_ep>:
 21c:	88 1f       	adc	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	5a 95       	dec	r21
 222:	a9 f7       	brne	.-22     	; 0x20e <__udivmodhi4_loop>
 224:	80 95       	com	r24
 226:	90 95       	com	r25
 228:	bc 01       	movw	r22, r24
 22a:	cd 01       	movw	r24, r26
 22c:	08 95       	ret

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
