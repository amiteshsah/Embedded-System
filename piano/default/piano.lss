
piano.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000023  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000ba  00000000  00000000  0000017b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000086  00000000  00000000  00000235  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000109  00000000  00000000  000002bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000007e  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000028  00000000  00000000  00000472  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ee       	ldi	r30, 0xE4	; 228
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <main>:
#include<avr/io.h>
#include<util/delay.h>
int main()
{
  92:	1a ba       	out	0x1a, r1	; 26
DDRA=0X00;
DDRC=0b00001000;
  94:	88 e0       	ldi	r24, 0x08	; 8
  96:	84 bb       	out	0x14, r24	; 20
DDRB=0XFF;
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	87 bb       	out	0x17, r24	; 23
PORTC=0b00001000;
PORTB=0b00001000;
}
else if(x==0b00000011)
{
OCR0=180;
  9c:	54 eb       	ldi	r21, 0xB4	; 180
PORTC=0b00001000;
  9e:	28 e0       	ldi	r18, 0x08	; 8
PORTC=0b00001000;
PORTB=0b00001000;
}
else if(x==0b00000010)
{
OCR0=120;
  a0:	48 e7       	ldi	r20, 0x78	; 120

unsigned int x;
x=PINA & 0b00000011;
if(x==0b00000001)
{
OCR0=60;
  a2:	3c e3       	ldi	r19, 0x3C	; 60
}


void pwm(void)
{
TCCR0|=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS00);
  a4:	83 b7       	in	r24, 0x33	; 51
  a6:	89 66       	ori	r24, 0x69	; 105
  a8:	83 bf       	out	0x33, r24	; 51
while(1)
{
pwm();

unsigned int x;
x=PINA & 0b00000011;
  aa:	89 b3       	in	r24, 0x19	; 25
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	83 70       	andi	r24, 0x03	; 3
  b0:	90 70       	andi	r25, 0x00	; 0
if(x==0b00000001)
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	91 05       	cpc	r25, r1
  b6:	11 f4       	brne	.+4      	; 0xbc <main+0x2a>
{
OCR0=60;
  b8:	3c bf       	out	0x3c, r19	; 60
  ba:	04 c0       	rjmp	.+8      	; 0xc4 <main+0x32>
PORTC=0b00001000;
PORTB=0b00001000;
}
else if(x==0b00000010)
  bc:	82 30       	cpi	r24, 0x02	; 2
  be:	91 05       	cpc	r25, r1
  c0:	21 f4       	brne	.+8      	; 0xca <main+0x38>
{
OCR0=120;
  c2:	4c bf       	out	0x3c, r20	; 60
PORTC=0b00001000;
  c4:	25 bb       	out	0x15, r18	; 21
PORTB=0b00001000;
  c6:	28 bb       	out	0x18, r18	; 24
  c8:	05 c0       	rjmp	.+10     	; 0xd4 <main+0x42>
}
else if(x==0b00000011)
  ca:	03 97       	sbiw	r24, 0x03	; 3
  cc:	11 f4       	brne	.+4      	; 0xd2 <main+0x40>
{
OCR0=180;
  ce:	5c bf       	out	0x3c, r21	; 60
  d0:	f9 cf       	rjmp	.-14     	; 0xc4 <main+0x32>
PORTC=0b00001000;
PORTB=0b00001000;
}
else
PORTC=0X00;
  d2:	15 ba       	out	0x15, r1	; 21
PORTB=0X00;
  d4:	18 ba       	out	0x18, r1	; 24
  d6:	e6 cf       	rjmp	.-52     	; 0xa4 <main+0x12>

000000d8 <pwm>:
return 0;
}


void pwm(void)
{
  d8:	83 b7       	in	r24, 0x33	; 51
  da:	89 66       	ori	r24, 0x69	; 105
  dc:	83 bf       	out	0x33, r24	; 51
TCCR0|=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS00);
}
  de:	08 95       	ret

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
