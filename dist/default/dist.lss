
dist.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000318  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00000318  0000038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000095  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000531  00000000  00000000  00000475  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001e4  00000000  00000000  000009a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000052a  00000000  00000000  00000b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  000010b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000127  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000155  00000000  00000000  0000128b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e1       	ldi	r30, 0x18	; 24
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 39       	cpi	r26, 0x94	; 148
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e9       	ldi	r26, 0x94	; 148
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 39       	cpi	r26, 0x94	; 148
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
  8a:	0c 94 8a 01 	jmp	0x314	; 0x314 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <cmd_LCD>:
	}
	return 0;
}

void cmd_LCD(unsigned char xyz)
{ 
  92:	82 bb       	out	0x12, r24	; 18
	LCD_data_cntrl=xyz;
	LCD_data_cntrl &=~ (1<<rs);
  94:	90 98       	cbi	0x12, 0	; 18
	LCD_data_cntrl &=~ (1<<rw);
  96:	91 98       	cbi	0x12, 1	; 18
	LCD_data_cntrl |= (1<<en);
  98:	92 9a       	sbi	0x12, 2	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	8a ef       	ldi	r24, 0xFA	; 250
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <cmd_LCD+0xc>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
  a2:	92 98       	cbi	0x12, 2	; 18
}
  a4:	08 95       	ret

000000a6 <write_LCD>:


void write_LCD(unsigned char abc)
{
  a6:	82 bb       	out	0x12, r24	; 18

	LCD_data_cntrl=abc;
	LCD_data_cntrl |= (1<<rs);
  a8:	90 9a       	sbi	0x12, 0	; 18
	LCD_data_cntrl &=~ (1<<rw);
  aa:	91 98       	cbi	0x12, 1	; 18
	LCD_data_cntrl |= (1<<en);
  ac:	92 9a       	sbi	0x12, 2	; 18
  ae:	8a ef       	ldi	r24, 0xFA	; 250
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <write_LCD+0xc>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
  b6:	92 98       	cbi	0x12, 2	; 18
}
  b8:	08 95       	ret

000000ba <dis_cmd>:


void dis_cmd(unsigned char cmd)
{ 
  ba:	28 2f       	mov	r18, r24
  bc:	20 7f       	andi	r18, 0xF0	; 240
	return 0;
}

void cmd_LCD(unsigned char xyz)
{ 
	LCD_data_cntrl=xyz;
  be:	22 bb       	out	0x12, r18	; 18
	LCD_data_cntrl &=~ (1<<rs);
  c0:	90 98       	cbi	0x12, 0	; 18
	LCD_data_cntrl &=~ (1<<rw);
  c2:	91 98       	cbi	0x12, 1	; 18
	LCD_data_cntrl |= (1<<en);
  c4:	92 9a       	sbi	0x12, 2	; 18
  c6:	2a ef       	ldi	r18, 0xFA	; 250
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	f9 01       	movw	r30, r18
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <dis_cmd+0x12>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
  d0:	92 98       	cbi	0x12, 2	; 18
void dis_cmd(unsigned char cmd)
{ 
unsigned char cmd1;
cmd1 = (cmd&0xf0);
cmd_LCD(cmd1);
cmd1 = ((cmd<<4)&0xf0);
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	44 e0       	ldi	r20, 0x04	; 4
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	4a 95       	dec	r20
  dc:	e1 f7       	brne	.-8      	; 0xd6 <dis_cmd+0x1c>
	return 0;
}

void cmd_LCD(unsigned char xyz)
{ 
	LCD_data_cntrl=xyz;
  de:	82 bb       	out	0x12, r24	; 18
	LCD_data_cntrl &=~ (1<<rs);
  e0:	90 98       	cbi	0x12, 0	; 18
	LCD_data_cntrl &=~ (1<<rw);
  e2:	91 98       	cbi	0x12, 1	; 18
	LCD_data_cntrl |= (1<<en);
  e4:	92 9a       	sbi	0x12, 2	; 18
  e6:	c9 01       	movw	r24, r18
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <dis_cmd+0x2e>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
  ec:	92 98       	cbi	0x12, 2	; 18
  ee:	c9 01       	movw	r24, r18
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <dis_cmd+0x36>
cmd1 = (cmd&0xf0);
cmd_LCD(cmd1);
cmd1 = ((cmd<<4)&0xf0);
cmd_LCD(cmd1);
_delay_ms(1);
}
  f4:	08 95       	ret

000000f6 <dis_write>:


void dis_write(unsigned char write)
{ 
  f6:	28 2f       	mov	r18, r24
  f8:	20 7f       	andi	r18, 0xF0	; 240


void write_LCD(unsigned char abc)
{

	LCD_data_cntrl=abc;
  fa:	22 bb       	out	0x12, r18	; 18
	LCD_data_cntrl |= (1<<rs);
  fc:	90 9a       	sbi	0x12, 0	; 18
	LCD_data_cntrl &=~ (1<<rw);
  fe:	91 98       	cbi	0x12, 1	; 18
	LCD_data_cntrl |= (1<<en);
 100:	92 9a       	sbi	0x12, 2	; 18
 102:	2a ef       	ldi	r18, 0xFA	; 250
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	f9 01       	movw	r30, r18
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <dis_write+0x12>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
 10c:	92 98       	cbi	0x12, 2	; 18
void dis_write(unsigned char write)
{ 
unsigned char write1;
write1 = (write&0xf0);
write_LCD(write1);
write1 = ((write<<4)&0xf0);
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	54 e0       	ldi	r21, 0x04	; 4
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	5a 95       	dec	r21
 118:	e1 f7       	brne	.-8      	; 0x112 <dis_write+0x1c>


void write_LCD(unsigned char abc)
{

	LCD_data_cntrl=abc;
 11a:	82 bb       	out	0x12, r24	; 18
	LCD_data_cntrl |= (1<<rs);
 11c:	90 9a       	sbi	0x12, 0	; 18
	LCD_data_cntrl &=~ (1<<rw);
 11e:	91 98       	cbi	0x12, 1	; 18
	LCD_data_cntrl |= (1<<en);
 120:	92 9a       	sbi	0x12, 2	; 18
 122:	c9 01       	movw	r24, r18
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <dis_write+0x2e>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
 128:	92 98       	cbi	0x12, 2	; 18
 12a:	c9 01       	movw	r24, r18
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <dis_write+0x36>
write1 = (write&0xf0);
write_LCD(write1);
write1 = ((write<<4)&0xf0);
write_LCD(write1);
_delay_ms(1);
}
 130:	08 95       	ret

00000132 <string_LCD>:

void string_LCD(unsigned char *str)
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	ec 01       	movw	r28, r24
 138:	02 c0       	rjmp	.+4      	; 0x13e <string_LCD+0xc>
	int i;
	
	for(i=0;str[i]!='\0';i++) 
	{	dis_write(str[i]);
 13a:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_write>

void string_LCD(unsigned char *str)
{
	int i;
	
	for(i=0;str[i]!='\0';i++) 
 13e:	89 91       	ld	r24, Y+
 140:	88 23       	and	r24, r24
 142:	d9 f7       	brne	.-10     	; 0x13a <string_LCD+0x8>
	{	dis_write(str[i]);
	 	
  	}
	return 0;
	}
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <lcd_init>:


void lcd_init(void)
{
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
	
	dis_cmd(0x02);
	dis_cmd(0x28);
 150:	88 e2       	ldi	r24, 0x28	; 40
 152:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
	dis_cmd(0x0c);
 156:	8c e0       	ldi	r24, 0x0C	; 12
 158:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
	dis_cmd(0x01);
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
}
 162:	08 95       	ret

00000164 <LCD_number>:

void LCD_number(unsigned int value)
{	dis_cmd(0x04);//for decrementing the cursor position
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	ec 01       	movw	r28, r24
 16a:	84 e0       	ldi	r24, 0x04	; 4
 16c:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
 170:	0e c0       	rjmp	.+28     	; 0x18e <LCD_number+0x2a>
	unsigned int a=0;
	while(value!=0)
	{	a=value%10;
		dis_write(a+48);
 172:	ce 01       	movw	r24, r28
 174:	6a e0       	ldi	r22, 0x0A	; 10
 176:	70 e0       	ldi	r23, 0x00	; 0
 178:	0e 94 76 01 	call	0x2ec	; 0x2ec <__udivmodhi4>
 17c:	80 5d       	subi	r24, 0xD0	; 208
 17e:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_write>
		value=value/10;
 182:	ce 01       	movw	r24, r28
 184:	6a e0       	ldi	r22, 0x0A	; 10
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	0e 94 76 01 	call	0x2ec	; 0x2ec <__udivmodhi4>
 18c:	eb 01       	movw	r28, r22
}

void LCD_number(unsigned int value)
{	dis_cmd(0x04);//for decrementing the cursor position
	unsigned int a=0;
	while(value!=0)
 18e:	20 97       	sbiw	r28, 0x00	; 0
 190:	81 f7       	brne	.-32     	; 0x172 <LCD_number+0xe>
	{	a=value%10;
		dis_write(a+48);
		value=value/10;
	}
	dis_cmd(0x06);// for again incrementing the cursor position
 192:	86 e0       	ldi	r24, 0x06	; 6
 194:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
}
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <main>:
void LCD_number(unsigned int value);
void ADC_initi();
unsigned int read_ADC(unsigned char ch);

int main()
{
 19e:	0f 93       	push	r16
 1a0:	1f 93       	push	r17
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
unsigned int x;
DDRA=0X00;	
 1a6:	1a ba       	out	0x1a, r1	; 26
DDRD=0XFF;
 1a8:	8f ef       	ldi	r24, 0xFF	; 255
 1aa:	81 bb       	out	0x11, r24	; 17
	dis_cmd(0x06);// for again incrementing the cursor position
}

void ADC_initi(void)
{
ADMUX=(1<<REFS0)|(1<<REFS1);
 1ac:	80 ec       	ldi	r24, 0xC0	; 192
 1ae:	87 b9       	out	0x07, r24	; 7
ADCSRA=(1<<ADEN)|(1<<ADATE)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
 1b0:	87 ea       	ldi	r24, 0xA7	; 167
 1b2:	86 b9       	out	0x06, r24	; 6
unsigned int x;
DDRA=0X00;	
DDRD=0XFF;
	
	ADC_initi();
	lcd_init();	
 1b4:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_init>
	dis_cmd(0x01);
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
 1be:	08 ea       	ldi	r16, 0xA8	; 168
 1c0:	11 e6       	ldi	r17, 0x61	; 97
ADCSRA=(1<<ADEN)|(1<<ADATE)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
}
unsigned int read_ADC(unsigned char ch)
{
ch=ch&0b00000111;
ADMUX|=ch;
 1c2:	87 b1       	in	r24, 0x07	; 7
 1c4:	87 b9       	out	0x07, r24	; 7
ADCSRA|=(1<<ADSC);
 1c6:	36 9a       	sbi	0x06, 6	; 6
while(!(ADCSRA&(1<<ADIF)));
 1c8:	34 9b       	sbis	0x06, 4	; 6
 1ca:	fe cf       	rjmp	.-4      	; 0x1c8 <main+0x2a>
ADCSRA|=(1<<ADIF);
 1cc:	34 9a       	sbi	0x06, 4	; 6
return(ADC);
 1ce:	c4 b1       	in	r28, 0x04	; 4
 1d0:	d5 b1       	in	r29, 0x05	; 5
	dis_cmd(0x01);
	while(1)
	{ 
   x=read_ADC(0);
  ;
if(x<200)
 1d2:	c8 3c       	cpi	r28, 0xC8	; 200
 1d4:	d1 05       	cpc	r29, r1
 1d6:	60 f4       	brcc	.+24     	; 0x1f0 <main+0x52>
{
  dis_cmd(0x83);
 1d8:	83 e8       	ldi	r24, 0x83	; 131
 1da:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
  LCD_number(x);
 1de:	ce 01       	movw	r24, r28
 1e0:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_number>
  dis_cmd(0xc0);
 1e4:	80 ec       	ldi	r24, 0xC0	; 192
 1e6:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
string_LCD("NO OBSTACLES");
 1ea:	80 e6       	ldi	r24, 0x60	; 96
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	53 c0       	rjmp	.+166    	; 0x296 <main+0xf8>
_delay_ms(100);
}


 else if(x>217 && x<230)
 1f0:	ce 01       	movw	r24, r28
 1f2:	8a 5d       	subi	r24, 0xDA	; 218
 1f4:	90 40       	sbci	r25, 0x00	; 0
 1f6:	0c 97       	sbiw	r24, 0x0c	; 12
 1f8:	60 f4       	brcc	.+24     	; 0x212 <main+0x74>
{
dis_cmd(0x83);
 1fa:	83 e8       	ldi	r24, 0x83	; 131
 1fc:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
  LCD_number(x);
 200:	ce 01       	movw	r24, r28
 202:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_number>
  dis_cmd(0xc0);
 206:	80 ec       	ldi	r24, 0xC0	; 192
 208:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
string_LCD("12cm");
 20c:	8d e6       	ldi	r24, 0x6D	; 109
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	42 c0       	rjmp	.+132    	; 0x296 <main+0xf8>
_delay_ms(100);
}
else if(x>250 && x<265)
 212:	ce 01       	movw	r24, r28
 214:	8b 5f       	subi	r24, 0xFB	; 251
 216:	90 40       	sbci	r25, 0x00	; 0
 218:	0e 97       	sbiw	r24, 0x0e	; 14
 21a:	60 f4       	brcc	.+24     	; 0x234 <main+0x96>
{
dis_cmd(0x83);
 21c:	83 e8       	ldi	r24, 0x83	; 131
 21e:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
  LCD_number(x);
 222:	ce 01       	movw	r24, r28
 224:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_number>
  dis_cmd(0xc0);
 228:	80 ec       	ldi	r24, 0xC0	; 192
 22a:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
string_LCD("9cm");
 22e:	82 e7       	ldi	r24, 0x72	; 114
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	31 c0       	rjmp	.+98     	; 0x296 <main+0xf8>
_delay_ms(100);
}


else if(x>340 && x<355)
 234:	ce 01       	movw	r24, r28
 236:	85 55       	subi	r24, 0x55	; 85
 238:	91 40       	sbci	r25, 0x01	; 1
 23a:	0e 97       	sbiw	r24, 0x0e	; 14
 23c:	60 f4       	brcc	.+24     	; 0x256 <main+0xb8>
{
dis_cmd(0x83);
 23e:	83 e8       	ldi	r24, 0x83	; 131
 240:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
  LCD_number(x);
 244:	ce 01       	movw	r24, r28
 246:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_number>
  dis_cmd(0xc0);
 24a:	80 ec       	ldi	r24, 0xC0	; 192
 24c:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
string_LCD("6cm");
 250:	86 e7       	ldi	r24, 0x76	; 118
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	20 c0       	rjmp	.+64     	; 0x296 <main+0xf8>
_delay_ms(100);
}

else if(x>395 &&x<410)
 256:	ce 01       	movw	r24, r28
 258:	8c 58       	subi	r24, 0x8C	; 140
 25a:	91 40       	sbci	r25, 0x01	; 1
 25c:	0e 97       	sbiw	r24, 0x0e	; 14
 25e:	60 f4       	brcc	.+24     	; 0x278 <main+0xda>
{
dis_cmd(0x83);
 260:	83 e8       	ldi	r24, 0x83	; 131
 262:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
  LCD_number(x);
 266:	ce 01       	movw	r24, r28
 268:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_number>
  dis_cmd(0xc0);
 26c:	80 ec       	ldi	r24, 0xC0	; 192
 26e:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
string_LCD("3cm");
 272:	8a e7       	ldi	r24, 0x7A	; 122
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0f c0       	rjmp	.+30     	; 0x296 <main+0xf8>
_delay_ms(100);
}

else if(x>450)
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	c3 3c       	cpi	r28, 0xC3	; 195
 27c:	d8 07       	cpc	r29, r24
 27e:	88 f0       	brcs	.+34     	; 0x2a2 <main+0x104>
{dis_cmd(0x83);
 280:	83 e8       	ldi	r24, 0x83	; 131
 282:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
  LCD_number(x);
 286:	ce 01       	movw	r24, r28
 288:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_number>
  dis_cmd(0xc0);
 28c:	80 ec       	ldi	r24, 0xC0	; 192
 28e:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
string_LCD("0cm");
 292:	8e e7       	ldi	r24, 0x7E	; 126
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 99 00 	call	0x132	; 0x132 <string_LCD>
 29a:	c8 01       	movw	r24, r16
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <main+0xfe>
 2a0:	90 cf       	rjmp	.-224    	; 0x1c2 <main+0x24>
_delay_ms(100);	 
}
else
{ dis_cmd(0x83);
 2a2:	83 e8       	ldi	r24, 0x83	; 131
 2a4:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
  LCD_number(x);
 2a8:	ce 01       	movw	r24, r28
 2aa:	0e 94 b2 00 	call	0x164	; 0x164 <LCD_number>
  dis_cmd(0xc0);
 2ae:	80 ec       	ldi	r24, 0xC0	; 192
 2b0:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
string_LCD("unknown distance");
 2b4:	82 e8       	ldi	r24, 0x82	; 130
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 99 00 	call	0x132	; 0x132 <string_LCD>
 2bc:	c8 01       	movw	r24, r16
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <main+0x120>
_delay_ms(100);
dis_cmd(0x01);
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
 2c8:	7c cf       	rjmp	.-264    	; 0x1c2 <main+0x24>

000002ca <ADC_initi>:
	}
	dis_cmd(0x06);// for again incrementing the cursor position
}

void ADC_initi(void)
{
 2ca:	80 ec       	ldi	r24, 0xC0	; 192
 2cc:	87 b9       	out	0x07, r24	; 7
ADMUX=(1<<REFS0)|(1<<REFS1);
ADCSRA=(1<<ADEN)|(1<<ADATE)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
 2ce:	87 ea       	ldi	r24, 0xA7	; 167
 2d0:	86 b9       	out	0x06, r24	; 6
}
 2d2:	08 95       	ret

000002d4 <read_ADC>:
unsigned int read_ADC(unsigned char ch)
{
 2d4:	97 b1       	in	r25, 0x07	; 7
 2d6:	87 70       	andi	r24, 0x07	; 7
 2d8:	89 2b       	or	r24, r25
 2da:	87 b9       	out	0x07, r24	; 7
ch=ch&0b00000111;
ADMUX|=ch;
ADCSRA|=(1<<ADSC);
 2dc:	36 9a       	sbi	0x06, 6	; 6
while(!(ADCSRA&(1<<ADIF)));
 2de:	34 9b       	sbis	0x06, 4	; 6
 2e0:	fe cf       	rjmp	.-4      	; 0x2de <read_ADC+0xa>
ADCSRA|=(1<<ADIF);
 2e2:	34 9a       	sbi	0x06, 4	; 6
return(ADC);
 2e4:	24 b1       	in	r18, 0x04	; 4
 2e6:	35 b1       	in	r19, 0x05	; 5
}
 2e8:	c9 01       	movw	r24, r18
 2ea:	08 95       	ret

000002ec <__udivmodhi4>:
 2ec:	aa 1b       	sub	r26, r26
 2ee:	bb 1b       	sub	r27, r27
 2f0:	51 e1       	ldi	r21, 0x11	; 17
 2f2:	07 c0       	rjmp	.+14     	; 0x302 <__udivmodhi4_ep>

000002f4 <__udivmodhi4_loop>:
 2f4:	aa 1f       	adc	r26, r26
 2f6:	bb 1f       	adc	r27, r27
 2f8:	a6 17       	cp	r26, r22
 2fa:	b7 07       	cpc	r27, r23
 2fc:	10 f0       	brcs	.+4      	; 0x302 <__udivmodhi4_ep>
 2fe:	a6 1b       	sub	r26, r22
 300:	b7 0b       	sbc	r27, r23

00000302 <__udivmodhi4_ep>:
 302:	88 1f       	adc	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	5a 95       	dec	r21
 308:	a9 f7       	brne	.-22     	; 0x2f4 <__udivmodhi4_loop>
 30a:	80 95       	com	r24
 30c:	90 95       	com	r25
 30e:	bc 01       	movw	r22, r24
 310:	cd 01       	movw	r24, r26
 312:	08 95       	ret

00000314 <_exit>:
 314:	f8 94       	cli

00000316 <__stop_program>:
 316:	ff cf       	rjmp	.-2      	; 0x316 <__stop_program>
