
PC_CONTROL_WIRELESS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000130  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000003a  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000161  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000012a  00000000  00000000  0000033f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001c1  00000000  00000000  00000469  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  0000062c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000b2  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000028  00000000  00000000  0000072e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  00000756  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
unsigned int getcha(void);



int main()
{
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	87 bb       	out	0x17, r24	; 23
DDRB=0XFF;
DDRD=0xFF;
  96:	81 bb       	out	0x11, r24	; 17



void init()
{
	UCSRB |= (1 << RXEN)|(1<<TXEN);   // Turn on the transmission and reception circuitry
  98:	8a b1       	in	r24, 0x0a	; 10
  9a:	88 61       	ori	r24, 0x18	; 24
  9c:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1<<USBS) | (1 << UCSZ0) | (1 << UCSZ1); 
  9e:	80 b5       	in	r24, 0x20	; 32
  a0:	8e 68       	ori	r24, 0x8E	; 142
  a2:	80 bd       	out	0x20, r24	; 32
											// Use 8-bit character sizes
 
	UBRRL = BAUD_PRESCALE; 
  a4:	8f e9       	ldi	r24, 0x9F	; 159
  a6:	89 b9       	out	0x09, r24	; 9
			// Load lower 8-bits of the baud rate value into the low byte of the UBRR register
	UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value..
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	80 bd       	out	0x20, r24	; 32
{
	UCSRB |= (1 << RXEN)|(1<<TXEN);   // Turn on the transmission and reception circuitry
	UCSRC |= (1 << URSEL) | (1<<USBS) | (1 << UCSZ0) | (1 << UCSZ1); 
											// Use 8-bit character sizes
 
	UBRRL = BAUD_PRESCALE; 
  ac:	ef e9       	ldi	r30, 0x9F	; 159
			// Load lower 8-bits of the baud rate value into the low byte of the UBRR register
	UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value..
  ae:	71 e0       	ldi	r23, 0x01	; 1
{
PORTB=0b00000010;
}
else if(x=='d')
{
PORTB=0b00001000;
  b0:	68 e0       	ldi	r22, 0x08	; 8
{
PORTB=0b00000101;
}
else if(x=='a')
{
PORTB=0b00000010;
  b2:	52 e0       	ldi	r21, 0x02	; 2
{
PORTB=0b00001010;
}
else if(x=='s')
{
PORTB=0b00000101;
  b4:	45 e0       	ldi	r20, 0x05	; 5
init();
x=getcha();
putcha(x);
if(x=='w')
{
PORTB=0b00001010;
  b6:	3a e0       	ldi	r19, 0x0A	; 10



void init()
{
	UCSRB |= (1 << RXEN)|(1<<TXEN);   // Turn on the transmission and reception circuitry
  b8:	8a b1       	in	r24, 0x0a	; 10
  ba:	88 61       	ori	r24, 0x18	; 24
  bc:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1<<USBS) | (1 << UCSZ0) | (1 << UCSZ1); 
  be:	80 b5       	in	r24, 0x20	; 32
  c0:	8e 68       	ori	r24, 0x8E	; 142
  c2:	80 bd       	out	0x20, r24	; 32
											// Use 8-bit character sizes
 
	UBRRL = BAUD_PRESCALE; 
  c4:	e9 b9       	out	0x09, r30	; 9
			// Load lower 8-bits of the baud rate value into the low byte of the UBRR register
	UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value..
  c6:	70 bd       	out	0x20, r23	; 32
									// into the high byte of the UBRR register
}
 
unsigned int getcha()
{	unsigned int ret;
	while ((UCSRA & (1 << RXC)) == 0); 
  c8:	5f 9b       	sbis	0x0b, 7	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <main+0x36>
	{	
	}	// Do nothing until data has been received and is ready to be read from UDR
	
	return UDR; // return the byte
  cc:	2c b1       	in	r18, 0x0c	; 12
  ce:	82 2f       	mov	r24, r18
  d0:	90 e0       	ldi	r25, 0x00	; 0
}
 

void putcha(unsigned char send)
{	while(!(UCSRA & (1<<UDRE)))
  d2:	5d 9b       	sbis	0x0b, 5	; 11
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <main+0x40>
   {
   }
   UDR=send;
  d6:	2c b9       	out	0x0c, r18	; 12
while(1)
{
init();
x=getcha();
putcha(x);
if(x=='w')
  d8:	87 37       	cpi	r24, 0x77	; 119
  da:	91 05       	cpc	r25, r1
  dc:	11 f4       	brne	.+4      	; 0xe2 <main+0x50>
{
PORTB=0b00001010;
  de:	38 bb       	out	0x18, r19	; 24
  e0:	eb cf       	rjmp	.-42     	; 0xb8 <main+0x26>
}
else if(x=='s')
  e2:	83 37       	cpi	r24, 0x73	; 115
  e4:	91 05       	cpc	r25, r1
  e6:	11 f4       	brne	.+4      	; 0xec <main+0x5a>
{
PORTB=0b00000101;
  e8:	48 bb       	out	0x18, r20	; 24
  ea:	e6 cf       	rjmp	.-52     	; 0xb8 <main+0x26>
}
else if(x=='a')
  ec:	81 36       	cpi	r24, 0x61	; 97
  ee:	91 05       	cpc	r25, r1
  f0:	11 f4       	brne	.+4      	; 0xf6 <main+0x64>
{
PORTB=0b00000010;
  f2:	58 bb       	out	0x18, r21	; 24
  f4:	e1 cf       	rjmp	.-62     	; 0xb8 <main+0x26>
}
else if(x=='d')
  f6:	84 36       	cpi	r24, 0x64	; 100
  f8:	91 05       	cpc	r25, r1
  fa:	11 f4       	brne	.+4      	; 0x100 <main+0x6e>
{
PORTB=0b00001000;
  fc:	68 bb       	out	0x18, r22	; 24
  fe:	dc cf       	rjmp	.-72     	; 0xb8 <main+0x26>
}
else
{
PORTB=0X00;
 100:	18 ba       	out	0x18, r1	; 24
 102:	da cf       	rjmp	.-76     	; 0xb8 <main+0x26>

00000104 <init>:
}



void init()
{
 104:	8a b1       	in	r24, 0x0a	; 10
 106:	88 61       	ori	r24, 0x18	; 24
 108:	8a b9       	out	0x0a, r24	; 10
	UCSRB |= (1 << RXEN)|(1<<TXEN);   // Turn on the transmission and reception circuitry
	UCSRC |= (1 << URSEL) | (1<<USBS) | (1 << UCSZ0) | (1 << UCSZ1); 
 10a:	80 b5       	in	r24, 0x20	; 32
 10c:	8e 68       	ori	r24, 0x8E	; 142
 10e:	80 bd       	out	0x20, r24	; 32
											// Use 8-bit character sizes
 
	UBRRL = BAUD_PRESCALE; 
 110:	8f e9       	ldi	r24, 0x9F	; 159
 112:	89 b9       	out	0x09, r24	; 9
			// Load lower 8-bits of the baud rate value into the low byte of the UBRR register
	UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value..
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	80 bd       	out	0x20, r24	; 32
									// into the high byte of the UBRR register
}
 118:	08 95       	ret

0000011a <getcha>:
 
unsigned int getcha()
{	unsigned int ret;
 11a:	5f 9b       	sbis	0x0b, 7	; 11
 11c:	fe cf       	rjmp	.-4      	; 0x11a <getcha>
	while ((UCSRA & (1 << RXC)) == 0); 
	{	
	}	// Do nothing until data has been received and is ready to be read from UDR
	
	return UDR; // return the byte
 11e:	8c b1       	in	r24, 0x0c	; 12
}
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	08 95       	ret

00000124 <putcha>:
 

void putcha(unsigned char send)
{	while(!(UCSRA & (1<<UDRE)))
 124:	5d 9b       	sbis	0x0b, 5	; 11
 126:	fe cf       	rjmp	.-4      	; 0x124 <putcha>
   {
   }
   UDR=send;
 128:	8c b9       	out	0x0c, r24	; 12
}
 12a:	08 95       	ret

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
