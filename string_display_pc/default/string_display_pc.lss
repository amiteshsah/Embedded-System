
string_display_pc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000226  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000027a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000099  00000000  00000000  0000029a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000051e  00000000  00000000  00000333  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001b9  00000000  00000000  00000851  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000430  00000000  00000000  00000a0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000c0  00000000  00000000  00000e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000141  00000000  00000000  00000efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000102  00000000  00000000  0000103d  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e2       	ldi	r30, 0x26	; 38
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  8a:	0c 94 11 01 	jmp	0x222	; 0x222 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <cmd_LCD>:
return 0;
}


void cmd_LCD(unsigned char xyz)
{ 
  92:	88 bb       	out	0x18, r24	; 24
	LCD_data_cntrl=xyz;
	LCD_data_cntrl &=~ (1<<rs);
  94:	c0 98       	cbi	0x18, 0	; 24
	LCD_data_cntrl &=~ (1<<rw);
  96:	c1 98       	cbi	0x18, 1	; 24
	LCD_data_cntrl |= (1<<en);
  98:	c2 9a       	sbi	0x18, 2	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	8a ef       	ldi	r24, 0xFA	; 250
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <cmd_LCD+0xc>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
  a2:	c2 98       	cbi	0x18, 2	; 24
}
  a4:	08 95       	ret

000000a6 <write_LCD>:


void write_LCD(unsigned char abc)
{
  a6:	88 bb       	out	0x18, r24	; 24

	LCD_data_cntrl=abc;
	LCD_data_cntrl |= (1<<rs);
  a8:	c0 9a       	sbi	0x18, 0	; 24
	LCD_data_cntrl &=~ (1<<rw);
  aa:	c1 98       	cbi	0x18, 1	; 24
	LCD_data_cntrl |= (1<<en);
  ac:	c2 9a       	sbi	0x18, 2	; 24
  ae:	8a ef       	ldi	r24, 0xFA	; 250
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <write_LCD+0xc>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
  b6:	c2 98       	cbi	0x18, 2	; 24
}
  b8:	08 95       	ret

000000ba <dis_cmd>:


void dis_cmd(unsigned char cmd)
{ 
  ba:	28 2f       	mov	r18, r24
  bc:	20 7f       	andi	r18, 0xF0	; 240
}


void cmd_LCD(unsigned char xyz)
{ 
	LCD_data_cntrl=xyz;
  be:	28 bb       	out	0x18, r18	; 24
	LCD_data_cntrl &=~ (1<<rs);
  c0:	c0 98       	cbi	0x18, 0	; 24
	LCD_data_cntrl &=~ (1<<rw);
  c2:	c1 98       	cbi	0x18, 1	; 24
	LCD_data_cntrl |= (1<<en);
  c4:	c2 9a       	sbi	0x18, 2	; 24
  c6:	2a ef       	ldi	r18, 0xFA	; 250
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	f9 01       	movw	r30, r18
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <dis_cmd+0x12>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
  d0:	c2 98       	cbi	0x18, 2	; 24
void dis_cmd(unsigned char cmd)
{ 
unsigned char cmd1;
cmd1 = (cmd&0xf0);
cmd_LCD(cmd1);
cmd1 = ((cmd<<4)&0xf0);
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	44 e0       	ldi	r20, 0x04	; 4
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	4a 95       	dec	r20
  dc:	e1 f7       	brne	.-8      	; 0xd6 <dis_cmd+0x1c>
}


void cmd_LCD(unsigned char xyz)
{ 
	LCD_data_cntrl=xyz;
  de:	88 bb       	out	0x18, r24	; 24
	LCD_data_cntrl &=~ (1<<rs);
  e0:	c0 98       	cbi	0x18, 0	; 24
	LCD_data_cntrl &=~ (1<<rw);
  e2:	c1 98       	cbi	0x18, 1	; 24
	LCD_data_cntrl |= (1<<en);
  e4:	c2 9a       	sbi	0x18, 2	; 24
  e6:	c9 01       	movw	r24, r18
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <dis_cmd+0x2e>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
  ec:	c2 98       	cbi	0x18, 2	; 24
  ee:	c9 01       	movw	r24, r18
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <dis_cmd+0x36>
cmd1 = (cmd&0xf0);
cmd_LCD(cmd1);
cmd1 = ((cmd<<4)&0xf0);
cmd_LCD(cmd1);
_delay_ms(1);
}
  f4:	08 95       	ret

000000f6 <dis_write>:


void dis_write(unsigned char write)
{ 
  f6:	28 2f       	mov	r18, r24
  f8:	20 7f       	andi	r18, 0xF0	; 240


void write_LCD(unsigned char abc)
{

	LCD_data_cntrl=abc;
  fa:	28 bb       	out	0x18, r18	; 24
	LCD_data_cntrl |= (1<<rs);
  fc:	c0 9a       	sbi	0x18, 0	; 24
	LCD_data_cntrl &=~ (1<<rw);
  fe:	c1 98       	cbi	0x18, 1	; 24
	LCD_data_cntrl |= (1<<en);
 100:	c2 9a       	sbi	0x18, 2	; 24
 102:	2a ef       	ldi	r18, 0xFA	; 250
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	f9 01       	movw	r30, r18
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <dis_write+0x12>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
 10c:	c2 98       	cbi	0x18, 2	; 24
void dis_write(unsigned char write)
{ 
unsigned char write1;
write1 = (write&0xf0);
write_LCD(write1);
write1 = ((write<<4)&0xf0);
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	54 e0       	ldi	r21, 0x04	; 4
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	5a 95       	dec	r21
 118:	e1 f7       	brne	.-8      	; 0x112 <dis_write+0x1c>


void write_LCD(unsigned char abc)
{

	LCD_data_cntrl=abc;
 11a:	88 bb       	out	0x18, r24	; 24
	LCD_data_cntrl |= (1<<rs);
 11c:	c0 9a       	sbi	0x18, 0	; 24
	LCD_data_cntrl &=~ (1<<rw);
 11e:	c1 98       	cbi	0x18, 1	; 24
	LCD_data_cntrl |= (1<<en);
 120:	c2 9a       	sbi	0x18, 2	; 24
 122:	c9 01       	movw	r24, r18
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <dis_write+0x2e>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
 128:	c2 98       	cbi	0x18, 2	; 24
 12a:	c9 01       	movw	r24, r18
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <dis_write+0x36>
write1 = (write&0xf0);
write_LCD(write1);
write1 = ((write<<4)&0xf0);
write_LCD(write1);
_delay_ms(1);
}
 130:	08 95       	ret

00000132 <string_LCD>:

void string_LCD(unsigned char *str)
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	ec 01       	movw	r28, r24
 138:	02 c0       	rjmp	.+4      	; 0x13e <string_LCD+0xc>
	int i;
	
	for(i=0;str[i]!='\0';i++) 
	{	dis_write(str[i]);
 13a:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_write>

void string_LCD(unsigned char *str)
{
	int i;
	
	for(i=0;str[i]!='\0';i++) 
 13e:	89 91       	ld	r24, Y+
 140:	88 23       	and	r24, r24
 142:	d9 f7       	brne	.-10     	; 0x13a <string_LCD+0x8>
	{	dis_write(str[i]);
	 	
  	}
	}
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <lcd_init>:


void lcd_init(void)
{
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
	
	dis_cmd(0x02);
	dis_cmd(0x28);
 150:	88 e2       	ldi	r24, 0x28	; 40
 152:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
	dis_cmd(0x0c);
 156:	8c e0       	ldi	r24, 0x0C	; 12
 158:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
	dis_cmd(0x01);
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
}
 162:	08 95       	ret

00000164 <main>:
unsigned int getcha(void);



int main()
{
 164:	1f 93       	push	r17
DDRB=0XFF;
 166:	8f ef       	ldi	r24, 0xFF	; 255
 168:	87 bb       	out	0x17, r24	; 23
DDRD=0xFF;
 16a:	81 bb       	out	0x11, r24	; 17
unsigned int x;
lcd_init();
 16c:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_init>
dis_cmd(0x80);
 170:	80 e8       	ldi	r24, 0x80	; 128
 172:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
{
	UCSRB |= (1 << RXEN)|(1<<TXEN);   // Turn on the transmission and reception circuitry
	UCSRC |= (1 << URSEL) | (1<<USBS) | (1 << UCSZ0) | (1 << UCSZ1); 
											// Use 8-bit character sizes
 
	UBRRL = BAUD_PRESCALE; 
 176:	13 e3       	ldi	r17, 0x33	; 51



void init()
{
	UCSRB |= (1 << RXEN)|(1<<TXEN);   // Turn on the transmission and reception circuitry
 178:	8a b1       	in	r24, 0x0a	; 10
 17a:	88 61       	ori	r24, 0x18	; 24
 17c:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1<<USBS) | (1 << UCSZ0) | (1 << UCSZ1); 
 17e:	80 b5       	in	r24, 0x20	; 32
 180:	8e 68       	ori	r24, 0x8E	; 142
 182:	80 bd       	out	0x20, r24	; 32
											// Use 8-bit character sizes
 
	UBRRL = BAUD_PRESCALE; 
 184:	19 b9       	out	0x09, r17	; 9
			// Load lower 8-bits of the baud rate value into the low byte of the UBRR register
	UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value..
 186:	10 bc       	out	0x20, r1	; 32
									// into the high byte of the UBRR register
}
 
unsigned int getcha()
{	unsigned int ret;
	while ((UCSRA & (1 << RXC)) == 0); 
 188:	5f 9b       	sbis	0x0b, 7	; 11
 18a:	fe cf       	rjmp	.-4      	; 0x188 <main+0x24>
	{	
	}	// Do nothing until data has been received and is ready to be read from UDR
	
	return UDR; // return the byte
 18c:	8c b1       	in	r24, 0x0c	; 12
}
 

void putcha(unsigned char send)
{	while(!(UCSRA & (1<<UDRE)))
 18e:	5d 9b       	sbis	0x0b, 5	; 11
 190:	fe cf       	rjmp	.-4      	; 0x18e <main+0x2a>
   {
   }
   UDR=send;
 192:	8c b9       	out	0x0c, r24	; 12
putcha(x);
//for(int i=0;i<=100;i++)
//s[i]=x;
//dis_cmd(0x80);
//dis_write('x');
dis_write(x);
 194:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_write>
 198:	ef cf       	rjmp	.-34     	; 0x178 <main+0x14>

0000019a <LCD_number>:
	dis_cmd(0x0c);
	dis_cmd(0x01);
}

void LCD_number(unsigned int value)
{	dis_cmd(0x04);//for decrementing the cursor position
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	ec 01       	movw	r28, r24
 1a0:	84 e0       	ldi	r24, 0x04	; 4
 1a2:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
 1a6:	0e c0       	rjmp	.+28     	; 0x1c4 <LCD_number+0x2a>
	unsigned int a=0;
	while(value!=0)
	{	a=value%10;
		dis_write(a+48);
 1a8:	ce 01       	movw	r24, r28
 1aa:	6a e0       	ldi	r22, 0x0A	; 10
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__udivmodhi4>
 1b2:	80 5d       	subi	r24, 0xD0	; 208
 1b4:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_write>
		value=value/10;
 1b8:	ce 01       	movw	r24, r28
 1ba:	6a e0       	ldi	r22, 0x0A	; 10
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__udivmodhi4>
 1c2:	eb 01       	movw	r28, r22
}

void LCD_number(unsigned int value)
{	dis_cmd(0x04);//for decrementing the cursor position
	unsigned int a=0;
	while(value!=0)
 1c4:	20 97       	sbiw	r28, 0x00	; 0
 1c6:	81 f7       	brne	.-32     	; 0x1a8 <LCD_number+0xe>
	{	a=value%10;
		dis_write(a+48);
		value=value/10;
	}
	dis_cmd(0x06);// for again incrementing the cursor position
 1c8:	86 e0       	ldi	r24, 0x06	; 6
 1ca:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <init>:



void init()
{
 1d4:	8a b1       	in	r24, 0x0a	; 10
 1d6:	88 61       	ori	r24, 0x18	; 24
 1d8:	8a b9       	out	0x0a, r24	; 10
	UCSRB |= (1 << RXEN)|(1<<TXEN);   // Turn on the transmission and reception circuitry
	UCSRC |= (1 << URSEL) | (1<<USBS) | (1 << UCSZ0) | (1 << UCSZ1); 
 1da:	80 b5       	in	r24, 0x20	; 32
 1dc:	8e 68       	ori	r24, 0x8E	; 142
 1de:	80 bd       	out	0x20, r24	; 32
											// Use 8-bit character sizes
 
	UBRRL = BAUD_PRESCALE; 
 1e0:	83 e3       	ldi	r24, 0x33	; 51
 1e2:	89 b9       	out	0x09, r24	; 9
			// Load lower 8-bits of the baud rate value into the low byte of the UBRR register
	UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value..
 1e4:	10 bc       	out	0x20, r1	; 32
									// into the high byte of the UBRR register
}
 1e6:	08 95       	ret

000001e8 <getcha>:
 
unsigned int getcha()
{	unsigned int ret;
 1e8:	5f 9b       	sbis	0x0b, 7	; 11
 1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <getcha>
	while ((UCSRA & (1 << RXC)) == 0); 
	{	
	}	// Do nothing until data has been received and is ready to be read from UDR
	
	return UDR; // return the byte
 1ec:	8c b1       	in	r24, 0x0c	; 12
}
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	08 95       	ret

000001f2 <putcha>:
 

void putcha(unsigned char send)
{	while(!(UCSRA & (1<<UDRE)))
 1f2:	5d 9b       	sbis	0x0b, 5	; 11
 1f4:	fe cf       	rjmp	.-4      	; 0x1f2 <putcha>
   {
   }
   UDR=send;
 1f6:	8c b9       	out	0x0c, r24	; 12
}
 1f8:	08 95       	ret

000001fa <__udivmodhi4>:
 1fa:	aa 1b       	sub	r26, r26
 1fc:	bb 1b       	sub	r27, r27
 1fe:	51 e1       	ldi	r21, 0x11	; 17
 200:	07 c0       	rjmp	.+14     	; 0x210 <__udivmodhi4_ep>

00000202 <__udivmodhi4_loop>:
 202:	aa 1f       	adc	r26, r26
 204:	bb 1f       	adc	r27, r27
 206:	a6 17       	cp	r26, r22
 208:	b7 07       	cpc	r27, r23
 20a:	10 f0       	brcs	.+4      	; 0x210 <__udivmodhi4_ep>
 20c:	a6 1b       	sub	r26, r22
 20e:	b7 0b       	sbc	r27, r23

00000210 <__udivmodhi4_ep>:
 210:	88 1f       	adc	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	5a 95       	dec	r21
 216:	a9 f7       	brne	.-22     	; 0x202 <__udivmodhi4_loop>
 218:	80 95       	com	r24
 21a:	90 95       	com	r25
 21c:	bc 01       	movw	r22, r24
 21e:	cd 01       	movw	r24, r26
 220:	08 95       	ret

00000222 <_exit>:
 222:	f8 94       	cli

00000224 <__stop_program>:
 224:	ff cf       	rjmp	.-2      	; 0x224 <__stop_program>
