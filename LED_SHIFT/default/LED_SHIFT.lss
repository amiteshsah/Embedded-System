
LED_SHIFT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002a8  00000000  00000000  00000197  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000da  00000000  00000000  0000043f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000023b  00000000  00000000  00000519  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000754  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c9  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000c0  00000000  00000000  0000083d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  000008fd  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e0       	ldi	r30, 0x08	; 8
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <main>:
#include<avr/io.h>
#include<util/delay.h>
int main()
{
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
DDRB=0b11111111;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	87 bb       	out	0x17, r24	; 23
DDRC=0b00001000;
  9a:	88 e0       	ldi	r24, 0x08	; 8
  9c:	84 bb       	out	0x14, r24	; 20
while(1)
{  
	PORTB=0b00000001;
  9e:	01 e0       	ldi	r16, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a0:	44 e2       	ldi	r20, 0x24	; 36
  a2:	54 ef       	ldi	r21, 0xF4	; 244
	_delay_ms(250);
	PORTB=0b00000010;
  a4:	12 e0       	ldi	r17, 0x02	; 2
  a6:	28 ea       	ldi	r18, 0xA8	; 168
  a8:	31 e6       	ldi	r19, 0x61	; 97
	_delay_ms(100);
	PORTB=0b00000100;
  aa:	b4 e0       	ldi	r27, 0x04	; 4
	_delay_ms(100);
	PORTB=0b00001000;
  ac:	68 e0       	ldi	r22, 0x08	; 8
	_delay_ms(100);
	PORTB=0b00010000;
  ae:	a0 e1       	ldi	r26, 0x10	; 16
	_delay_ms(100);
	PORTB=0b00100000;
  b0:	f0 e2       	ldi	r31, 0x20	; 32
	_delay_ms(100);
	PORTB=0b01000000;
  b2:	e0 e4       	ldi	r30, 0x40	; 64
	_delay_ms(100);
	PORTB=0b10000000;
  b4:	70 e8       	ldi	r23, 0x80	; 128
{
DDRB=0b11111111;
DDRC=0b00001000;
while(1)
{  
	PORTB=0b00000001;
  b6:	08 bb       	out	0x18, r16	; 24
  b8:	ca 01       	movw	r24, r20
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x28>
	_delay_ms(250);
	PORTB=0b00000010;
  be:	18 bb       	out	0x18, r17	; 24
  c0:	c9 01       	movw	r24, r18
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <main+0x30>
	_delay_ms(100);
	PORTB=0b00000100;
  c6:	b8 bb       	out	0x18, r27	; 24
  c8:	c9 01       	movw	r24, r18
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <main+0x38>
	_delay_ms(100);
	PORTB=0b00001000;
  ce:	68 bb       	out	0x18, r22	; 24
  d0:	c9 01       	movw	r24, r18
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x40>
	_delay_ms(100);
	PORTB=0b00010000;
  d6:	a8 bb       	out	0x18, r26	; 24
  d8:	c9 01       	movw	r24, r18
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <main+0x48>
	_delay_ms(100);
	PORTB=0b00100000;
  de:	f8 bb       	out	0x18, r31	; 24
  e0:	c9 01       	movw	r24, r18
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <main+0x50>
	_delay_ms(100);
	PORTB=0b01000000;
  e6:	e8 bb       	out	0x18, r30	; 24
  e8:	c9 01       	movw	r24, r18
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <main+0x58>
	_delay_ms(100);
	PORTB=0b10000000;
  ee:	78 bb       	out	0x18, r23	; 24
  f0:	c9 01       	movw	r24, r18
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <main+0x60>
	_delay_ms(100);
	PORTB=0b00000000;
  f6:	18 ba       	out	0x18, r1	; 24
	PORTC=0b00001000;
  f8:	65 bb       	out	0x15, r22	; 21
  fa:	ca 01       	movw	r24, r20
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <main+0x6a>
	_delay_ms(250);
	PORTC=0b00000000;
 100:	15 ba       	out	0x15, r1	; 21
 102:	d9 cf       	rjmp	.-78     	; 0xb6 <main+0x24>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
