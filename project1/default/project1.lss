
project1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  000004de  00000552  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000088  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000881  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000205  00000000  00000000  00000ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000007d6  00000000  00000000  000010aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  00001880  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000119  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000003b2  00000000  00000000  00001a49  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a8  00000000  00000000  00001dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ed       	ldi	r30, 0xDE	; 222
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e8       	ldi	r26, 0x8A	; 138
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 38       	cpi	r26, 0x8A	; 138
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 29 01 	call	0x252	; 0x252 <main>
  8a:	0c 94 6d 02 	jmp	0x4da	; 0x4da <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <key>:
 }	
	return 0;
}

int key()
{	int key=1;
  92:	3f ee       	ldi	r19, 0xEF	; 239
		if((PINA & 0b00000010) == 0){return 2;key=0;}
		if((PINA & 0b00000100) == 0){return 3;key=0;}
		if((PINA & 0b00001000) == 0){return 4;key=0;}
		

		PORTC=0b11011111;
  94:	2f ed       	ldi	r18, 0xDF	; 223
		if((PINA & 0b00000001) == 0){return 5;key=0;}
		if((PINA & 0b00000010) == 0){return 6;key=0;}
		if((PINA & 0b00000100) == 0){return 7;key=0;}
		if((PINA & 0b00001000) == 0){return 8;key=0;}

		PORTC=0b10111111;
  96:	9f eb       	ldi	r25, 0xBF	; 191
		if((PINA & 0b00000001) == 0){return 9;key=0;}
		if((PINA & 0b00000010) == 0){return 10;key=0;}
		if((PINA & 0b00000100) == 0){return 11;key=0;}
		if((PINA & 0b00001000) == 0){return 12;key=0;}

		PORTC=0b01111111;
  98:	8f e7       	ldi	r24, 0x7F	; 127
  9a:	4e c0       	rjmp	.+156    	; 0x138 <key+0xa6>
int key()
{	int key=1;
	while(key)
	{	PORTC=0b11101111;
		if((PINA & 0b00000001) == 0){return 1;key=0;}
		if((PINA & 0b00000010) == 0){return 2;key=0;}
  9c:	c9 99       	sbic	0x19, 1	; 25
  9e:	03 c0       	rjmp	.+6      	; 0xa6 <key+0x14>
  a0:	22 e0       	ldi	r18, 0x02	; 2
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	4e c0       	rjmp	.+156    	; 0x142 <key+0xb0>
		if((PINA & 0b00000100) == 0){return 3;key=0;}
  a6:	ca 99       	sbic	0x19, 2	; 25
  a8:	03 c0       	rjmp	.+6      	; 0xb0 <key+0x1e>
  aa:	23 e0       	ldi	r18, 0x03	; 3
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	49 c0       	rjmp	.+146    	; 0x142 <key+0xb0>
		if((PINA & 0b00001000) == 0){return 4;key=0;}
  b0:	cb 99       	sbic	0x19, 3	; 25
  b2:	03 c0       	rjmp	.+6      	; 0xba <key+0x28>
  b4:	24 e0       	ldi	r18, 0x04	; 4
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	44 c0       	rjmp	.+136    	; 0x142 <key+0xb0>
		

		PORTC=0b11011111;
  ba:	25 bb       	out	0x15, r18	; 21
		if((PINA & 0b00000001) == 0){return 5;key=0;}
  bc:	c8 99       	sbic	0x19, 0	; 25
  be:	03 c0       	rjmp	.+6      	; 0xc6 <key+0x34>
  c0:	25 e0       	ldi	r18, 0x05	; 5
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	3e c0       	rjmp	.+124    	; 0x142 <key+0xb0>
		if((PINA & 0b00000010) == 0){return 6;key=0;}
  c6:	c9 99       	sbic	0x19, 1	; 25
  c8:	03 c0       	rjmp	.+6      	; 0xd0 <key+0x3e>
  ca:	26 e0       	ldi	r18, 0x06	; 6
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	39 c0       	rjmp	.+114    	; 0x142 <key+0xb0>
		if((PINA & 0b00000100) == 0){return 7;key=0;}
  d0:	ca 99       	sbic	0x19, 2	; 25
  d2:	03 c0       	rjmp	.+6      	; 0xda <key+0x48>
  d4:	27 e0       	ldi	r18, 0x07	; 7
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	34 c0       	rjmp	.+104    	; 0x142 <key+0xb0>
		if((PINA & 0b00001000) == 0){return 8;key=0;}
  da:	cb 99       	sbic	0x19, 3	; 25
  dc:	03 c0       	rjmp	.+6      	; 0xe4 <key+0x52>
  de:	28 e0       	ldi	r18, 0x08	; 8
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	2f c0       	rjmp	.+94     	; 0x142 <key+0xb0>

		PORTC=0b10111111;
  e4:	95 bb       	out	0x15, r25	; 21
		if((PINA & 0b00000001) == 0){return 9;key=0;}
  e6:	c8 99       	sbic	0x19, 0	; 25
  e8:	03 c0       	rjmp	.+6      	; 0xf0 <key+0x5e>
  ea:	29 e0       	ldi	r18, 0x09	; 9
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	29 c0       	rjmp	.+82     	; 0x142 <key+0xb0>
		if((PINA & 0b00000010) == 0){return 10;key=0;}
  f0:	c9 99       	sbic	0x19, 1	; 25
  f2:	03 c0       	rjmp	.+6      	; 0xfa <key+0x68>
  f4:	2a e0       	ldi	r18, 0x0A	; 10
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	24 c0       	rjmp	.+72     	; 0x142 <key+0xb0>
		if((PINA & 0b00000100) == 0){return 11;key=0;}
  fa:	ca 99       	sbic	0x19, 2	; 25
  fc:	03 c0       	rjmp	.+6      	; 0x104 <key+0x72>
  fe:	2b e0       	ldi	r18, 0x0B	; 11
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	1f c0       	rjmp	.+62     	; 0x142 <key+0xb0>
		if((PINA & 0b00001000) == 0){return 12;key=0;}
 104:	cb 99       	sbic	0x19, 3	; 25
 106:	03 c0       	rjmp	.+6      	; 0x10e <key+0x7c>
 108:	2c e0       	ldi	r18, 0x0C	; 12
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	1a c0       	rjmp	.+52     	; 0x142 <key+0xb0>

		PORTC=0b01111111;
 10e:	85 bb       	out	0x15, r24	; 21
		if((PINA & 0b00000001) == 0){return 13;key=0;}
 110:	c8 99       	sbic	0x19, 0	; 25
 112:	03 c0       	rjmp	.+6      	; 0x11a <key+0x88>
 114:	2d e0       	ldi	r18, 0x0D	; 13
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	14 c0       	rjmp	.+40     	; 0x142 <key+0xb0>
		if((PINA & 0b00000010) == 0){return 14;key=0;}
 11a:	c9 99       	sbic	0x19, 1	; 25
 11c:	03 c0       	rjmp	.+6      	; 0x124 <key+0x92>
 11e:	2e e0       	ldi	r18, 0x0E	; 14
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	0f c0       	rjmp	.+30     	; 0x142 <key+0xb0>
		if((PINA & 0b00000100) == 0){return 15;key=0;}
 124:	ca 99       	sbic	0x19, 2	; 25
 126:	03 c0       	rjmp	.+6      	; 0x12e <key+0x9c>
 128:	2f e0       	ldi	r18, 0x0F	; 15
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	0a c0       	rjmp	.+20     	; 0x142 <key+0xb0>
		if((PINA & 0b00001000) == 0){return 16;key=0;}
 12e:	cb 99       	sbic	0x19, 3	; 25
 130:	03 c0       	rjmp	.+6      	; 0x138 <key+0xa6>
 132:	20 e1       	ldi	r18, 0x10	; 16
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	05 c0       	rjmp	.+10     	; 0x142 <key+0xb0>
}

int key()
{	int key=1;
	while(key)
	{	PORTC=0b11101111;
 138:	35 bb       	out	0x15, r19	; 21
		if((PINA & 0b00000001) == 0){return 1;key=0;}
 13a:	c8 99       	sbic	0x19, 0	; 25
 13c:	af cf       	rjmp	.-162    	; 0x9c <key+0xa>
 13e:	21 e0       	ldi	r18, 0x01	; 1
 140:	30 e0       	ldi	r19, 0x00	; 0
		if((PINA & 0b00000010) == 0){return 14;key=0;}
		if((PINA & 0b00000100) == 0){return 15;key=0;}
		if((PINA & 0b00001000) == 0){return 16;key=0;}
	key=1;
	}
}
 142:	c9 01       	movw	r24, r18
 144:	08 95       	ret

00000146 <cmd_LCD>:




void cmd_LCD(unsigned char xyz)
{ 
 146:	82 bb       	out	0x12, r24	; 18
	LCD_data_cntrl=xyz;
	LCD_data_cntrl &=~ (1<<rs);
 148:	90 98       	cbi	0x12, 0	; 18
	LCD_data_cntrl &=~ (1<<rw);
 14a:	91 98       	cbi	0x12, 1	; 18
	LCD_data_cntrl |= (1<<en);
 14c:	92 9a       	sbi	0x12, 2	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 14e:	8a ef       	ldi	r24, 0xFA	; 250
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <cmd_LCD+0xc>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
 156:	92 98       	cbi	0x12, 2	; 18
}
 158:	08 95       	ret

0000015a <data_LCD>:


void data_LCD(unsigned char abc)
{
 15a:	82 bb       	out	0x12, r24	; 18

	LCD_data_cntrl=abc;
	LCD_data_cntrl |= (1<<rs);
 15c:	90 9a       	sbi	0x12, 0	; 18
	LCD_data_cntrl &=~ (1<<rw);
 15e:	91 98       	cbi	0x12, 1	; 18
	LCD_data_cntrl |= (1<<en);
 160:	92 9a       	sbi	0x12, 2	; 18
 162:	8a ef       	ldi	r24, 0xFA	; 250
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <data_LCD+0xc>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
 16a:	92 98       	cbi	0x12, 2	; 18
}
 16c:	08 95       	ret

0000016e <dis_cmd>:


void dis_cmd(unsigned char cmd)
{ 
 16e:	28 2f       	mov	r18, r24
 170:	20 7f       	andi	r18, 0xF0	; 240



void cmd_LCD(unsigned char xyz)
{ 
	LCD_data_cntrl=xyz;
 172:	22 bb       	out	0x12, r18	; 18
	LCD_data_cntrl &=~ (1<<rs);
 174:	90 98       	cbi	0x12, 0	; 18
	LCD_data_cntrl &=~ (1<<rw);
 176:	91 98       	cbi	0x12, 1	; 18
	LCD_data_cntrl |= (1<<en);
 178:	92 9a       	sbi	0x12, 2	; 18
 17a:	2a ef       	ldi	r18, 0xFA	; 250
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	f9 01       	movw	r30, r18
 180:	31 97       	sbiw	r30, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <dis_cmd+0x12>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
 184:	92 98       	cbi	0x12, 2	; 18
void dis_cmd(unsigned char cmd)
{ 
unsigned char cmd1;
cmd1 = (cmd&0xf0);
cmd_LCD(cmd1);
cmd1 = ((cmd<<4)&0xf0);
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	44 e0       	ldi	r20, 0x04	; 4
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	4a 95       	dec	r20
 190:	e1 f7       	brne	.-8      	; 0x18a <dis_cmd+0x1c>



void cmd_LCD(unsigned char xyz)
{ 
	LCD_data_cntrl=xyz;
 192:	82 bb       	out	0x12, r24	; 18
	LCD_data_cntrl &=~ (1<<rs);
 194:	90 98       	cbi	0x12, 0	; 18
	LCD_data_cntrl &=~ (1<<rw);
 196:	91 98       	cbi	0x12, 1	; 18
	LCD_data_cntrl |= (1<<en);
 198:	92 9a       	sbi	0x12, 2	; 18
 19a:	c9 01       	movw	r24, r18
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <dis_cmd+0x2e>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
 1a0:	92 98       	cbi	0x12, 2	; 18
 1a2:	c9 01       	movw	r24, r18
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <dis_cmd+0x36>
cmd1 = (cmd&0xf0);
cmd_LCD(cmd1);
cmd1 = ((cmd<<4)&0xf0);
cmd_LCD(cmd1);
_delay_ms(1);
}
 1a8:	08 95       	ret

000001aa <dis_data>:


void dis_data(unsigned char data)
{ 
 1aa:	28 2f       	mov	r18, r24
 1ac:	20 7f       	andi	r18, 0xF0	; 240


void data_LCD(unsigned char abc)
{

	LCD_data_cntrl=abc;
 1ae:	22 bb       	out	0x12, r18	; 18
	LCD_data_cntrl |= (1<<rs);
 1b0:	90 9a       	sbi	0x12, 0	; 18
	LCD_data_cntrl &=~ (1<<rw);
 1b2:	91 98       	cbi	0x12, 1	; 18
	LCD_data_cntrl |= (1<<en);
 1b4:	92 9a       	sbi	0x12, 2	; 18
 1b6:	2a ef       	ldi	r18, 0xFA	; 250
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	f9 01       	movw	r30, r18
 1bc:	31 97       	sbiw	r30, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <dis_data+0x12>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
 1c0:	92 98       	cbi	0x12, 2	; 18
void dis_data(unsigned char data)
{ 
unsigned char data1;
data1 = (data&0xf0);
data_LCD(data1);
data1 = ((data<<4)&0xf0);
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	54 e0       	ldi	r21, 0x04	; 4
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	5a 95       	dec	r21
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <dis_data+0x1c>


void data_LCD(unsigned char abc)
{

	LCD_data_cntrl=abc;
 1ce:	82 bb       	out	0x12, r24	; 18
	LCD_data_cntrl |= (1<<rs);
 1d0:	90 9a       	sbi	0x12, 0	; 18
	LCD_data_cntrl &=~ (1<<rw);
 1d2:	91 98       	cbi	0x12, 1	; 18
	LCD_data_cntrl |= (1<<en);
 1d4:	92 9a       	sbi	0x12, 2	; 18
 1d6:	c9 01       	movw	r24, r18
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <dis_data+0x2e>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
 1dc:	92 98       	cbi	0x12, 2	; 18
 1de:	c9 01       	movw	r24, r18
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <dis_data+0x36>
data1 = (data&0xf0);
data_LCD(data1);
data1 = ((data<<4)&0xf0);
data_LCD(data1);
_delay_ms(1);
}
 1e4:	08 95       	ret

000001e6 <string_LCD>:

void string_LCD(unsigned char *str)
{
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	ec 01       	movw	r28, r24
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <string_LCD+0xc>
	int i;
	
	for(i=0;str[i]!='\0';i++) 
	{	dis_data(str[i]);
 1ee:	0e 94 d5 00 	call	0x1aa	; 0x1aa <dis_data>

void string_LCD(unsigned char *str)
{
	int i;
	
	for(i=0;str[i]!='\0';i++) 
 1f2:	89 91       	ld	r24, Y+
 1f4:	88 23       	and	r24, r24
 1f6:	d9 f7       	brne	.-10     	; 0x1ee <string_LCD+0x8>
	{	dis_data(str[i]);
	 	
  	}
	return 0;
	}
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <lcd_init>:


void lcd_init(void)
{
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	0e 94 b7 00 	call	0x16e	; 0x16e <dis_cmd>
	
	dis_cmd(0x02);
	dis_cmd(0x28);
 204:	88 e2       	ldi	r24, 0x28	; 40
 206:	0e 94 b7 00 	call	0x16e	; 0x16e <dis_cmd>
	dis_cmd(0x0c);
 20a:	8c e0       	ldi	r24, 0x0C	; 12
 20c:	0e 94 b7 00 	call	0x16e	; 0x16e <dis_cmd>
	dis_cmd(0x01);
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	0e 94 b7 00 	call	0x16e	; 0x16e <dis_cmd>
}
 216:	08 95       	ret

00000218 <LCD_number>:

void LCD_number(unsigned int value)
{	dis_cmd(0x04);//for decrementing the cursor position
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	ec 01       	movw	r28, r24
 21e:	84 e0       	ldi	r24, 0x04	; 4
 220:	0e 94 b7 00 	call	0x16e	; 0x16e <dis_cmd>
 224:	0e c0       	rjmp	.+28     	; 0x242 <LCD_number+0x2a>
	unsigned int a=0;
	while(value!=0)
	{	a=value%10;
		dis_data(a+48);
 226:	ce 01       	movw	r24, r28
 228:	6a e0       	ldi	r22, 0x0A	; 10
 22a:	70 e0       	ldi	r23, 0x00	; 0
 22c:	0e 94 59 02 	call	0x4b2	; 0x4b2 <__udivmodhi4>
 230:	80 5d       	subi	r24, 0xD0	; 208
 232:	0e 94 d5 00 	call	0x1aa	; 0x1aa <dis_data>
		value=value/10;
 236:	ce 01       	movw	r24, r28
 238:	6a e0       	ldi	r22, 0x0A	; 10
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	0e 94 59 02 	call	0x4b2	; 0x4b2 <__udivmodhi4>
 240:	eb 01       	movw	r28, r22
}

void LCD_number(unsigned int value)
{	dis_cmd(0x04);//for decrementing the cursor position
	unsigned int a=0;
	while(value!=0)
 242:	20 97       	sbiw	r28, 0x00	; 0
 244:	81 f7       	brne	.-32     	; 0x226 <LCD_number+0xe>
	{	a=value%10;
		dis_data(a+48);
		value=value/10;
	}
	dis_cmd(0x06);// for again incrementing the cursor position
 246:	86 e0       	ldi	r24, 0x06	; 6
 248:	0e 94 b7 00 	call	0x16e	; 0x16e <dis_cmd>
}
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <main>:
void LCD_number(unsigned int value);

void pwm();

int main(void)
{	DDRA=0b00000000;
 252:	2f 92       	push	r2
 254:	3f 92       	push	r3
 256:	4f 92       	push	r4
 258:	5f 92       	push	r5
 25a:	6f 92       	push	r6
 25c:	7f 92       	push	r7
 25e:	8f 92       	push	r8
 260:	9f 92       	push	r9
 262:	af 92       	push	r10
 264:	bf 92       	push	r11
 266:	cf 92       	push	r12
 268:	df 92       	push	r13
 26a:	ef 92       	push	r14
 26c:	ff 92       	push	r15
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	1a ba       	out	0x1a, r1	; 26
  	DDRB=0b11111111;
 278:	8f ef       	ldi	r24, 0xFF	; 255
 27a:	87 bb       	out	0x17, r24	; 23
  	DDRD=0b11111111;
 27c:	81 bb       	out	0x11, r24	; 17

	DDRC=0b00001000;
 27e:	88 e0       	ldi	r24, 0x08	; 8
 280:	84 bb       	out	0x14, r24	; 20
	}
	dis_cmd(0x06);// for again incrementing the cursor position
}
void pwm(void)
{
TCCR0|=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS00);
 282:	83 b7       	in	r24, 0x33	; 51
 284:	89 66       	ori	r24, 0x69	; 105
 286:	83 bf       	out	0x33, r24	; 51
	DDRC=0b00001000;
  	int y=0;
	pwm();


	PORTA=0x0F;                                                                                                                                                                                                                       		
 288:	8f e0       	ldi	r24, 0x0F	; 15
 28a:	8b bb       	out	0x1b, r24	; 27
  	{	
	lcd_init();
	y=key();
if(y==1)
		{
		PORTB=0b00001000;
 28c:	08 e0       	ldi	r16, 0x08	; 8
 28e:	90 2e       	mov	r9, r16
		OCR0=180;
		PORTC=0b00001000;
		}
if(y==4)
		{
		OCR0=240;
 290:	10 ef       	ldi	r17, 0xF0	; 240
 292:	21 2e       	mov	r2, r17
		dis_cmd(0X80);
		string_LCD("RIGHT   ");
		}
if(y==2)
		{
		OCR0=120;
 294:	b8 e7       	ldi	r27, 0x78	; 120
 296:	4b 2e       	mov	r4, r27
		OCR0=240;
		PORTC=0b00001000;
		}
if(y==5)
 		{
		OCR0=60;
 298:	ac e3       	ldi	r26, 0x3C	; 60
 29a:	3a 2e       	mov	r3, r26
 29c:	f9 e1       	ldi	r31, 0x19	; 25
 29e:	6f 2e       	mov	r6, r31
 2a0:	71 2c       	mov	r7, r1
if(y==16)
		{
		 
	PORTB=0b00000001;
	_delay_ms(100);
	PORTB=0b00000010;
 2a2:	e8 ea       	ldi	r30, 0xA8	; 168
 2a4:	ae 2e       	mov	r10, r30
 2a6:	e1 e6       	ldi	r30, 0x61	; 97
 2a8:	be 2e       	mov	r11, r30
 2aa:	72 e0       	ldi	r23, 0x02	; 2
 2ac:	87 2e       	mov	r8, r23
	_delay_ms(100);
	PORTB=0b00000100;
 2ae:	64 e0       	ldi	r22, 0x04	; 4
 2b0:	56 2e       	mov	r5, r22


	PORTA=0x0F;                                                                                                                                                                                                                       		
  	while(1)
  	{	
	lcd_init();
 2b2:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_init>
	y=key();
 2b6:	0e 94 49 00 	call	0x92	; 0x92 <key>
 2ba:	8c 01       	movw	r16, r24
if(y==1)
 2bc:	81 30       	cpi	r24, 0x01	; 1
 2be:	91 05       	cpc	r25, r1
 2c0:	49 f4       	brne	.+18     	; 0x2d4 <main+0x82>
		{
		PORTB=0b00001000;
 2c2:	98 ba       	out	0x18, r9	; 24
		dis_cmd(0X80);
 2c4:	80 e8       	ldi	r24, 0x80	; 128
 2c6:	0e 94 b7 00 	call	0x16e	; 0x16e <dis_cmd>
		string_LCD("RIGHT   ");
 2ca:	80 e6       	ldi	r24, 0x60	; 96
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <string_LCD>
 2d2:	10 c0       	rjmp	.+32     	; 0x2f4 <main+0xa2>
		}
if(y==2)
 2d4:	82 30       	cpi	r24, 0x02	; 2
 2d6:	91 05       	cpc	r25, r1
 2d8:	11 f4       	brne	.+4      	; 0x2de <main+0x8c>
		{
		OCR0=120;
 2da:	4c be       	out	0x3c, r4	; 60
 2dc:	0f c0       	rjmp	.+30     	; 0x2fc <main+0xaa>
		PORTC=0b00001000;
		}
if(y==3)
 2de:	83 30       	cpi	r24, 0x03	; 3
 2e0:	91 05       	cpc	r25, r1
 2e2:	19 f4       	brne	.+6      	; 0x2ea <main+0x98>
		{
		OCR0=180;
 2e4:	84 eb       	ldi	r24, 0xB4	; 180
 2e6:	8c bf       	out	0x3c, r24	; 60
 2e8:	09 c0       	rjmp	.+18     	; 0x2fc <main+0xaa>
		PORTC=0b00001000;
		}
if(y==4)
 2ea:	84 30       	cpi	r24, 0x04	; 4
 2ec:	91 05       	cpc	r25, r1
 2ee:	11 f4       	brne	.+4      	; 0x2f4 <main+0xa2>
		{
		OCR0=240;
 2f0:	2c be       	out	0x3c, r2	; 60
 2f2:	04 c0       	rjmp	.+8      	; 0x2fc <main+0xaa>
		PORTC=0b00001000;
		}
if(y==5)
 2f4:	05 30       	cpi	r16, 0x05	; 5
 2f6:	11 05       	cpc	r17, r1
 2f8:	11 f4       	brne	.+4      	; 0x2fe <main+0xac>
 		{
		OCR0=60;
 2fa:	3c be       	out	0x3c, r3	; 60
		PORTC=0b00001000;
 2fc:	95 ba       	out	0x15, r9	; 21
		}
if(y==6 ||y==7||y==9)
 2fe:	c8 01       	movw	r24, r16
 300:	06 97       	sbiw	r24, 0x06	; 6
 302:	02 97       	sbiw	r24, 0x02	; 2
 304:	20 f0       	brcs	.+8      	; 0x30e <main+0xbc>
 306:	09 30       	cpi	r16, 0x09	; 9
 308:	11 05       	cpc	r17, r1
 30a:	09 f0       	breq	.+2      	; 0x30e <main+0xbc>
 30c:	48 c0       	rjmp	.+144    	; 0x39e <main+0x14c>
		{
		lcd_init();
 30e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_init>
 312:	cc 24       	eor	r12, r12
 314:	dd 24       	eor	r13, r13
	for(int i=0;i<=12;i++)
	{	dis_cmd(0x81);
 316:	81 e8       	ldi	r24, 0x81	; 129
 318:	0e 94 b7 00 	call	0x16e	; 0x16e <dis_cmd>
	LCD_number(i);
 31c:	c6 01       	movw	r24, r12
 31e:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_number>
 322:	80 e1       	ldi	r24, 0x10	; 16
 324:	97 e2       	ldi	r25, 0x27	; 39
 326:	f3 01       	movw	r30, r6
 328:	31 97       	sbiw	r30, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <main+0xd6>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 32c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 32e:	d9 f7       	brne	.-10     	; 0x326 <main+0xd4>
 330:	ee 24       	eor	r14, r14
 332:	ff 24       	eor	r15, r15
	_delay_ms(1000);
	for(int j=0;j<60;j++)
		{ dis_cmd(0x85);
 334:	85 e8       	ldi	r24, 0x85	; 133
 336:	0e 94 b7 00 	call	0x16e	; 0x16e <dis_cmd>
		LCD_number(j);
 33a:	c7 01       	movw	r24, r14
 33c:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_number>
 340:	80 e1       	ldi	r24, 0x10	; 16
 342:	97 e2       	ldi	r25, 0x27	; 39
 344:	f3 01       	movw	r30, r6
 346:	31 97       	sbiw	r30, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <main+0xf4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 34a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 34c:	d9 f7       	brne	.-10     	; 0x344 <main+0xf2>
 34e:	c0 e0       	ldi	r28, 0x00	; 0
 350:	d0 e0       	ldi	r29, 0x00	; 0
		_delay_ms(1000); 
			for(int k=0;k<60;k++)
			{dis_cmd(0x89);
 352:	89 e8       	ldi	r24, 0x89	; 137
 354:	0e 94 b7 00 	call	0x16e	; 0x16e <dis_cmd>
			LCD_number(k);
 358:	ce 01       	movw	r24, r28
 35a:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_number>
 35e:	80 e1       	ldi	r24, 0x10	; 16
 360:	97 e2       	ldi	r25, 0x27	; 39
 362:	f3 01       	movw	r30, r6
 364:	31 97       	sbiw	r30, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <main+0x112>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 368:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 36a:	d9 f7       	brne	.-10     	; 0x362 <main+0x110>
	_delay_ms(1000);
	for(int j=0;j<60;j++)
		{ dis_cmd(0x85);
		LCD_number(j);
		_delay_ms(1000); 
			for(int k=0;k<60;k++)
 36c:	21 96       	adiw	r28, 0x01	; 1
 36e:	cc 33       	cpi	r28, 0x3C	; 60
 370:	d1 05       	cpc	r29, r1
 372:	79 f7       	brne	.-34     	; 0x352 <main+0x100>
			{dis_cmd(0x89);
			LCD_number(k);
			_delay_ms(1000);}dis_cmd(0x01);
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	0e 94 b7 00 	call	0x16e	; 0x16e <dis_cmd>
		lcd_init();
	for(int i=0;i<=12;i++)
	{	dis_cmd(0x81);
	LCD_number(i);
	_delay_ms(1000);
	for(int j=0;j<60;j++)
 37a:	08 94       	sec
 37c:	e1 1c       	adc	r14, r1
 37e:	f1 1c       	adc	r15, r1
 380:	8c e3       	ldi	r24, 0x3C	; 60
 382:	e8 16       	cp	r14, r24
 384:	f1 04       	cpc	r15, r1
 386:	b1 f6       	brne	.-84     	; 0x334 <main+0xe2>
		_delay_ms(1000); 
			for(int k=0;k<60;k++)
			{dis_cmd(0x89);
			LCD_number(k);
			_delay_ms(1000);}dis_cmd(0x01);
		}dis_cmd(0x01);
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	0e 94 b7 00 	call	0x16e	; 0x16e <dis_cmd>
		PORTC=0b00001000;
		}
if(y==6 ||y==7||y==9)
		{
		lcd_init();
	for(int i=0;i<=12;i++)
 38e:	08 94       	sec
 390:	c1 1c       	adc	r12, r1
 392:	d1 1c       	adc	r13, r1
 394:	8d e0       	ldi	r24, 0x0D	; 13
 396:	c8 16       	cp	r12, r24
 398:	d1 04       	cpc	r13, r1
 39a:	09 f0       	breq	.+2      	; 0x39e <main+0x14c>
 39c:	bc cf       	rjmp	.-136    	; 0x316 <main+0xc4>
			_delay_ms(1000);}dis_cmd(0x01);
		}dis_cmd(0x01);
}
	}
	
if(y==8)
 39e:	08 30       	cpi	r16, 0x08	; 8
 3a0:	11 05       	cpc	r17, r1
 3a2:	31 f4       	brne	.+12     	; 0x3b0 <main+0x15e>
	{
	dis_cmd(0x01);
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	0e 94 b7 00 	call	0x16e	; 0x16e <dis_cmd>
	PORTB=0X00;
 3aa:	18 ba       	out	0x18, r1	; 24
	PORTC=0X00;
 3ac:	15 ba       	out	0x15, r1	; 21
 3ae:	27 c0       	rjmp	.+78     	; 0x3fe <main+0x1ac>
	}
if(y==10)
 3b0:	0a 30       	cpi	r16, 0x0A	; 10
 3b2:	11 05       	cpc	r17, r1
 3b4:	51 f4       	brne	.+20     	; 0x3ca <main+0x178>
		{
		PORTB=0b00000101;
 3b6:	85 e0       	ldi	r24, 0x05	; 5
 3b8:	88 bb       	out	0x18, r24	; 24
		dis_cmd(0X80);
 3ba:	80 e8       	ldi	r24, 0x80	; 128
 3bc:	0e 94 b7 00 	call	0x16e	; 0x16e <dis_cmd>
		string_LCD("BACKWARD");}
 3c0:	89 e6       	ldi	r24, 0x69	; 105
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <string_LCD>
 3c8:	25 c0       	rjmp	.+74     	; 0x414 <main+0x1c2>
if(y==11)
 3ca:	0b 30       	cpi	r16, 0x0B	; 11
 3cc:	11 05       	cpc	r17, r1
 3ce:	49 f4       	brne	.+18     	; 0x3e2 <main+0x190>
		{
		PORTB=0b00000000;
 3d0:	18 ba       	out	0x18, r1	; 24
		dis_cmd(0X80);
 3d2:	80 e8       	ldi	r24, 0x80	; 128
 3d4:	0e 94 b7 00 	call	0x16e	; 0x16e <dis_cmd>
		string_LCD("STOP   ");
 3d8:	82 e7       	ldi	r24, 0x72	; 114
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <string_LCD>
 3e0:	25 c0       	rjmp	.+74     	; 0x42c <main+0x1da>
		}
if(y==12)
 3e2:	0c 30       	cpi	r16, 0x0C	; 12
 3e4:	11 05       	cpc	r17, r1
 3e6:	59 f4       	brne	.+22     	; 0x3fe <main+0x1ac>
		{
		PORTB=0b01010101;
 3e8:	85 e5       	ldi	r24, 0x55	; 85
 3ea:	88 bb       	out	0x18, r24	; 24
 3ec:	c5 01       	movw	r24, r10
 3ee:	01 97       	sbiw	r24, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <main+0x19c>
		_delay_ms(100);
		PORTB=0b10101010;
 3f2:	8a ea       	ldi	r24, 0xAA	; 170
 3f4:	88 bb       	out	0x18, r24	; 24
 3f6:	c5 01       	movw	r24, r10
 3f8:	01 97       	sbiw	r24, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <main+0x1a6>
 3fc:	25 c0       	rjmp	.+74     	; 0x448 <main+0x1f6>
		_delay_ms(100);
		}
if(y==13)
 3fe:	0d 30       	cpi	r16, 0x0D	; 13
 400:	11 05       	cpc	r17, r1
 402:	41 f4       	brne	.+16     	; 0x414 <main+0x1c2>
		{
		PORTB=0b00001010;
 404:	8a e0       	ldi	r24, 0x0A	; 10
 406:	88 bb       	out	0x18, r24	; 24
		dis_cmd(0X80);
 408:	80 e8       	ldi	r24, 0x80	; 128
 40a:	0e 94 b7 00 	call	0x16e	; 0x16e <dis_cmd>
		string_LCD("FORWARD");
 40e:	8a e7       	ldi	r24, 0x7A	; 122
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	09 c0       	rjmp	.+18     	; 0x426 <main+0x1d4>
		}

if(y==14)
 414:	0e 30       	cpi	r16, 0x0E	; 14
 416:	11 05       	cpc	r17, r1
 418:	49 f4       	brne	.+18     	; 0x42c <main+0x1da>
		{
		PORTB=0b00000010;
 41a:	88 ba       	out	0x18, r8	; 24
		dis_cmd(0X80);
 41c:	80 e8       	ldi	r24, 0x80	; 128
 41e:	0e 94 b7 00 	call	0x16e	; 0x16e <dis_cmd>
		string_LCD("LEFT   ");
 422:	82 e8       	ldi	r24, 0x82	; 130
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <string_LCD>
 42a:	43 cf       	rjmp	.-378    	; 0x2b2 <main+0x60>
		}
if(y==15)
 42c:	0f 30       	cpi	r16, 0x0F	; 15
 42e:	11 05       	cpc	r17, r1
 430:	59 f4       	brne	.+22     	; 0x448 <main+0x1f6>
		{
		PORTB=0X0F;
 432:	8f e0       	ldi	r24, 0x0F	; 15
 434:	88 bb       	out	0x18, r24	; 24
 436:	84 ed       	ldi	r24, 0xD4	; 212
 438:	90 e3       	ldi	r25, 0x30	; 48
 43a:	fc 01       	movw	r30, r24
 43c:	31 97       	sbiw	r30, 0x01	; 1
 43e:	f1 f7       	brne	.-4      	; 0x43c <main+0x1ea>
		_delay_ms(50);
		PORTB=0X00;
 440:	18 ba       	out	0x18, r1	; 24
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	f1 f7       	brne	.-4      	; 0x442 <main+0x1f0>
 446:	35 cf       	rjmp	.-406    	; 0x2b2 <main+0x60>
		_delay_ms(50);
		}
if(y==16)
 448:	00 31       	cpi	r16, 0x10	; 16
 44a:	11 05       	cpc	r17, r1
 44c:	09 f0       	breq	.+2      	; 0x450 <main+0x1fe>
 44e:	31 cf       	rjmp	.-414    	; 0x2b2 <main+0x60>
		{
		 
	PORTB=0b00000001;
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	88 bb       	out	0x18, r24	; 24
 454:	c5 01       	movw	r24, r10
 456:	01 97       	sbiw	r24, 0x01	; 1
 458:	f1 f7       	brne	.-4      	; 0x456 <main+0x204>
	_delay_ms(100);
	PORTB=0b00000010;
 45a:	88 ba       	out	0x18, r8	; 24
 45c:	c5 01       	movw	r24, r10
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <main+0x20c>
	_delay_ms(100);
	PORTB=0b00000100;
 462:	58 ba       	out	0x18, r5	; 24
 464:	c5 01       	movw	r24, r10
 466:	01 97       	sbiw	r24, 0x01	; 1
 468:	f1 f7       	brne	.-4      	; 0x466 <__stack+0x7>
	_delay_ms(100);
	PORTB=0b00001000;
 46a:	98 ba       	out	0x18, r9	; 24
 46c:	c5 01       	movw	r24, r10
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <__stack+0xf>
	_delay_ms(100);
	PORTB=0b00010000;
 472:	80 e1       	ldi	r24, 0x10	; 16
 474:	88 bb       	out	0x18, r24	; 24
 476:	c5 01       	movw	r24, r10
 478:	01 97       	sbiw	r24, 0x01	; 1
 47a:	f1 f7       	brne	.-4      	; 0x478 <__stack+0x19>
	_delay_ms(100);
	PORTB=0b00100000;
 47c:	80 e2       	ldi	r24, 0x20	; 32
 47e:	88 bb       	out	0x18, r24	; 24
 480:	c5 01       	movw	r24, r10
 482:	01 97       	sbiw	r24, 0x01	; 1
 484:	f1 f7       	brne	.-4      	; 0x482 <__stack+0x23>
	_delay_ms(100);
	PORTB=0b01000000;
 486:	80 e4       	ldi	r24, 0x40	; 64
 488:	88 bb       	out	0x18, r24	; 24
 48a:	c5 01       	movw	r24, r10
 48c:	01 97       	sbiw	r24, 0x01	; 1
 48e:	f1 f7       	brne	.-4      	; 0x48c <__stack+0x2d>
	_delay_ms(100);
	PORTB=0b10000000;
 490:	80 e8       	ldi	r24, 0x80	; 128
 492:	88 bb       	out	0x18, r24	; 24
 494:	c5 01       	movw	r24, r10
 496:	01 97       	sbiw	r24, 0x01	; 1
 498:	f1 f7       	brne	.-4      	; 0x496 <__stack+0x37>
	_delay_ms(100);
	PORTB=0b00000000;
 49a:	18 ba       	out	0x18, r1	; 24
	PORTC=0b00001000;
 49c:	95 ba       	out	0x15, r9	; 21
 49e:	84 e2       	ldi	r24, 0x24	; 36
 4a0:	94 ef       	ldi	r25, 0xF4	; 244
 4a2:	01 97       	sbiw	r24, 0x01	; 1
 4a4:	f1 f7       	brne	.-4      	; 0x4a2 <__stack+0x43>
	_delay_ms(250);
	PORTC=0b00000000;
 4a6:	15 ba       	out	0x15, r1	; 21
 4a8:	04 cf       	rjmp	.-504    	; 0x2b2 <main+0x60>

000004aa <pwm>:
		value=value/10;
	}
	dis_cmd(0x06);// for again incrementing the cursor position
}
void pwm(void)
{
 4aa:	83 b7       	in	r24, 0x33	; 51
 4ac:	89 66       	ori	r24, 0x69	; 105
 4ae:	83 bf       	out	0x33, r24	; 51
TCCR0|=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS00);
}
 4b0:	08 95       	ret

000004b2 <__udivmodhi4>:
 4b2:	aa 1b       	sub	r26, r26
 4b4:	bb 1b       	sub	r27, r27
 4b6:	51 e1       	ldi	r21, 0x11	; 17
 4b8:	07 c0       	rjmp	.+14     	; 0x4c8 <__udivmodhi4_ep>

000004ba <__udivmodhi4_loop>:
 4ba:	aa 1f       	adc	r26, r26
 4bc:	bb 1f       	adc	r27, r27
 4be:	a6 17       	cp	r26, r22
 4c0:	b7 07       	cpc	r27, r23
 4c2:	10 f0       	brcs	.+4      	; 0x4c8 <__udivmodhi4_ep>
 4c4:	a6 1b       	sub	r26, r22
 4c6:	b7 0b       	sbc	r27, r23

000004c8 <__udivmodhi4_ep>:
 4c8:	88 1f       	adc	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	5a 95       	dec	r21
 4ce:	a9 f7       	brne	.-22     	; 0x4ba <__udivmodhi4_loop>
 4d0:	80 95       	com	r24
 4d2:	90 95       	com	r25
 4d4:	bc 01       	movw	r22, r24
 4d6:	cd 01       	movw	r24, r26
 4d8:	08 95       	ret

000004da <_exit>:
 4da:	f8 94       	cli

000004dc <__stop_program>:
 4dc:	ff cf       	rjmp	.-2      	; 0x4dc <__stop_program>
