
RF_KEYPAD_REC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  000002b0  00000324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000007a  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000005b5  00000000  00000000  000003ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001ba  00000000  00000000  000009a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004db  00000000  00000000  00000b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00001038  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000126  00000000  00000000  000010c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000003ea  00000000  00000000  000011ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000015d8  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 39       	cpi	r26, 0x90	; 144
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e9       	ldi	r26, 0x90	; 144
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 39       	cpi	r26, 0x90	; 144
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  8a:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <cmd_LCD>:
	}
	return 0;
}

void cmd_LCD(unsigned char xyz)
{ 
  92:	82 bb       	out	0x12, r24	; 18
	LCD_data_cntrl=xyz;
	LCD_data_cntrl &=~ (1<<rs);
  94:	90 98       	cbi	0x12, 0	; 18
	LCD_data_cntrl &=~ (1<<rw);
  96:	91 98       	cbi	0x12, 1	; 18
	LCD_data_cntrl |= (1<<en);
  98:	92 9a       	sbi	0x12, 2	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	8a ef       	ldi	r24, 0xFA	; 250
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <cmd_LCD+0xc>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
  a2:	92 98       	cbi	0x12, 2	; 18
}
  a4:	08 95       	ret

000000a6 <write_LCD>:


void write_LCD(unsigned char abc)
{
  a6:	82 bb       	out	0x12, r24	; 18

	LCD_data_cntrl=abc;
	LCD_data_cntrl |= (1<<rs);
  a8:	90 9a       	sbi	0x12, 0	; 18
	LCD_data_cntrl &=~ (1<<rw);
  aa:	91 98       	cbi	0x12, 1	; 18
	LCD_data_cntrl |= (1<<en);
  ac:	92 9a       	sbi	0x12, 2	; 18
  ae:	8a ef       	ldi	r24, 0xFA	; 250
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <write_LCD+0xc>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
  b6:	92 98       	cbi	0x12, 2	; 18
}
  b8:	08 95       	ret

000000ba <dis_cmd>:


void dis_cmd(unsigned char cmd)
{ 
  ba:	28 2f       	mov	r18, r24
  bc:	20 7f       	andi	r18, 0xF0	; 240
	return 0;
}

void cmd_LCD(unsigned char xyz)
{ 
	LCD_data_cntrl=xyz;
  be:	22 bb       	out	0x12, r18	; 18
	LCD_data_cntrl &=~ (1<<rs);
  c0:	90 98       	cbi	0x12, 0	; 18
	LCD_data_cntrl &=~ (1<<rw);
  c2:	91 98       	cbi	0x12, 1	; 18
	LCD_data_cntrl |= (1<<en);
  c4:	92 9a       	sbi	0x12, 2	; 18
  c6:	2a ef       	ldi	r18, 0xFA	; 250
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	f9 01       	movw	r30, r18
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <dis_cmd+0x12>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
  d0:	92 98       	cbi	0x12, 2	; 18
void dis_cmd(unsigned char cmd)
{ 
unsigned char cmd1;
cmd1 = (cmd&0xf0);
cmd_LCD(cmd1);
cmd1 = ((cmd<<4)&0xf0);
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	44 e0       	ldi	r20, 0x04	; 4
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	4a 95       	dec	r20
  dc:	e1 f7       	brne	.-8      	; 0xd6 <dis_cmd+0x1c>
	return 0;
}

void cmd_LCD(unsigned char xyz)
{ 
	LCD_data_cntrl=xyz;
  de:	82 bb       	out	0x12, r24	; 18
	LCD_data_cntrl &=~ (1<<rs);
  e0:	90 98       	cbi	0x12, 0	; 18
	LCD_data_cntrl &=~ (1<<rw);
  e2:	91 98       	cbi	0x12, 1	; 18
	LCD_data_cntrl |= (1<<en);
  e4:	92 9a       	sbi	0x12, 2	; 18
  e6:	c9 01       	movw	r24, r18
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <dis_cmd+0x2e>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
  ec:	92 98       	cbi	0x12, 2	; 18
  ee:	c9 01       	movw	r24, r18
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <dis_cmd+0x36>
cmd1 = (cmd&0xf0);
cmd_LCD(cmd1);
cmd1 = ((cmd<<4)&0xf0);
cmd_LCD(cmd1);
_delay_ms(1);
}
  f4:	08 95       	ret

000000f6 <dis_write>:


void dis_write(unsigned char write)
{ 
  f6:	28 2f       	mov	r18, r24
  f8:	20 7f       	andi	r18, 0xF0	; 240


void write_LCD(unsigned char abc)
{

	LCD_data_cntrl=abc;
  fa:	22 bb       	out	0x12, r18	; 18
	LCD_data_cntrl |= (1<<rs);
  fc:	90 9a       	sbi	0x12, 0	; 18
	LCD_data_cntrl &=~ (1<<rw);
  fe:	91 98       	cbi	0x12, 1	; 18
	LCD_data_cntrl |= (1<<en);
 100:	92 9a       	sbi	0x12, 2	; 18
 102:	2a ef       	ldi	r18, 0xFA	; 250
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	f9 01       	movw	r30, r18
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <dis_write+0x12>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
 10c:	92 98       	cbi	0x12, 2	; 18
void dis_write(unsigned char write)
{ 
unsigned char write1;
write1 = (write&0xf0);
write_LCD(write1);
write1 = ((write<<4)&0xf0);
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	54 e0       	ldi	r21, 0x04	; 4
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	5a 95       	dec	r21
 118:	e1 f7       	brne	.-8      	; 0x112 <dis_write+0x1c>


void write_LCD(unsigned char abc)
{

	LCD_data_cntrl=abc;
 11a:	82 bb       	out	0x12, r24	; 18
	LCD_data_cntrl |= (1<<rs);
 11c:	90 9a       	sbi	0x12, 0	; 18
	LCD_data_cntrl &=~ (1<<rw);
 11e:	91 98       	cbi	0x12, 1	; 18
	LCD_data_cntrl |= (1<<en);
 120:	92 9a       	sbi	0x12, 2	; 18
 122:	c9 01       	movw	r24, r18
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <dis_write+0x2e>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
 128:	92 98       	cbi	0x12, 2	; 18
 12a:	c9 01       	movw	r24, r18
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <dis_write+0x36>
write1 = (write&0xf0);
write_LCD(write1);
write1 = ((write<<4)&0xf0);
write_LCD(write1);
_delay_ms(1);
}
 130:	08 95       	ret

00000132 <string_LCD>:

void string_LCD(unsigned char *str)
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	ec 01       	movw	r28, r24
 138:	02 c0       	rjmp	.+4      	; 0x13e <string_LCD+0xc>
	int i;
	
	for(i=0;str[i]!='\0';i++) 
	{	dis_write(str[i]);
 13a:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_write>

void string_LCD(unsigned char *str)
{
	int i;
	
	for(i=0;str[i]!='\0';i++) 
 13e:	89 91       	ld	r24, Y+
 140:	88 23       	and	r24, r24
 142:	d9 f7       	brne	.-10     	; 0x13a <string_LCD+0x8>
	{	dis_write(str[i]);
	 	
  	}
	return 0;
	}
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <lcd_init>:


void lcd_init(void)
{
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
	
	dis_cmd(0x02);
	dis_cmd(0x28);
 150:	88 e2       	ldi	r24, 0x28	; 40
 152:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
	dis_cmd(0x0c);
 156:	8c e0       	ldi	r24, 0x0C	; 12
 158:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
	dis_cmd(0x01);
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
}
 162:	08 95       	ret

00000164 <main>:
void cmd_LCD(unsigned char);
void string_LCD(unsigned char *str);
void LCD_number(unsigned int value);

int main()
{
 164:	ef 92       	push	r14
 166:	ff 92       	push	r15
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
DDRA=0x00;
 170:	1a ba       	out	0x1a, r1	; 26
DDRB=0XFF;
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	87 bb       	out	0x17, r24	; 23
DDRD=0XFF;
 176:	81 bb       	out	0x11, r24	; 17
lcd_init();
 178:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_init>

x=PINA & 0b00001111;

if(x==0b00001010)
{
PORTB=0b00001010;
 17c:	7a e0       	ldi	r23, 0x0A	; 10
 17e:	e7 2e       	mov	r14, r23
 180:	c9 e1       	ldi	r28, 0x19	; 25
 182:	d0 e0       	ldi	r29, 0x00	; 0
string_LCD("RIGHT    ");
_delay_ms(5000);
}
else if(x==0b00000101)
{
PORTB=0b00000101;
 184:	65 e0       	ldi	r22, 0x05	; 5
 186:	f6 2e       	mov	r15, r22
string_LCD("LEFT    ");
_delay_ms(5000);
}
else if(x==0b00000100)
{
PORTB=0b00000001;
 188:	01 e0       	ldi	r16, 0x01	; 1
string_LCD("FORWARD");
_delay_ms(5000);
}
else if(x==0b00000001)
{
PORTB=0b00001000;
 18a:	18 e0       	ldi	r17, 0x08	; 8
lcd_init();
unsigned int x;
while(1)
{

x=PINA & 0b00001111;
 18c:	89 b3       	in	r24, 0x19	; 25
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	8f 70       	andi	r24, 0x0F	; 15
 192:	90 70       	andi	r25, 0x00	; 0

if(x==0b00001010)
 194:	8a 30       	cpi	r24, 0x0A	; 10
 196:	91 05       	cpc	r25, r1
 198:	81 f4       	brne	.+32     	; 0x1ba <main+0x56>
{
PORTB=0b00001010;
 19a:	e8 ba       	out	0x18, r14	; 24
dis_cmd(0x80);
 19c:	80 e8       	ldi	r24, 0x80	; 128
 19e:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
string_LCD("FORWARD");
 1a2:	80 e6       	ldi	r24, 0x60	; 96
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 99 00 	call	0x132	; 0x132 <string_LCD>
 1aa:	80 e5       	ldi	r24, 0x50	; 80
 1ac:	93 ec       	ldi	r25, 0xC3	; 195
 1ae:	fe 01       	movw	r30, r28
 1b0:	31 97       	sbiw	r30, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <main+0x4c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b6:	d9 f7       	brne	.-10     	; 0x1ae <main+0x4a>
 1b8:	e9 cf       	rjmp	.-46     	; 0x18c <main+0x28>
_delay_ms(5000);
}
else if(x==0b00000001)
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	91 05       	cpc	r25, r1
 1be:	81 f4       	brne	.+32     	; 0x1e0 <main+0x7c>
{
PORTB=0b00001000;
 1c0:	18 bb       	out	0x18, r17	; 24
dis_cmd(0x80);
 1c2:	80 e8       	ldi	r24, 0x80	; 128
 1c4:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
string_LCD("LEFT    ");
 1c8:	88 e6       	ldi	r24, 0x68	; 104
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 99 00 	call	0x132	; 0x132 <string_LCD>
 1d0:	80 e5       	ldi	r24, 0x50	; 80
 1d2:	93 ec       	ldi	r25, 0xC3	; 195
 1d4:	fe 01       	movw	r30, r28
 1d6:	31 97       	sbiw	r30, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <main+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1dc:	d9 f7       	brne	.-10     	; 0x1d4 <main+0x70>
 1de:	d6 cf       	rjmp	.-84     	; 0x18c <main+0x28>
_delay_ms(5000);
}
else if(x==0b00000100)
 1e0:	84 30       	cpi	r24, 0x04	; 4
 1e2:	91 05       	cpc	r25, r1
 1e4:	81 f4       	brne	.+32     	; 0x206 <main+0xa2>
{
PORTB=0b00000001;
 1e6:	08 bb       	out	0x18, r16	; 24
dis_cmd(0x80);
 1e8:	80 e8       	ldi	r24, 0x80	; 128
 1ea:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
string_LCD("RIGHT    ");
 1ee:	81 e7       	ldi	r24, 0x71	; 113
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 99 00 	call	0x132	; 0x132 <string_LCD>
 1f6:	80 e5       	ldi	r24, 0x50	; 80
 1f8:	93 ec       	ldi	r25, 0xC3	; 195
 1fa:	fe 01       	movw	r30, r28
 1fc:	31 97       	sbiw	r30, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <main+0x98>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 200:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 202:	d9 f7       	brne	.-10     	; 0x1fa <main+0x96>
 204:	c3 cf       	rjmp	.-122    	; 0x18c <main+0x28>
_delay_ms(5000);
}
else if(x==0b00000101)
 206:	05 97       	sbiw	r24, 0x05	; 5
 208:	81 f4       	brne	.+32     	; 0x22a <main+0xc6>
{
PORTB=0b00000101;
 20a:	f8 ba       	out	0x18, r15	; 24
dis_cmd(0x80);
 20c:	80 e8       	ldi	r24, 0x80	; 128
 20e:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
string_LCD("REVERSE    ");
 212:	8b e7       	ldi	r24, 0x7B	; 123
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 99 00 	call	0x132	; 0x132 <string_LCD>
 21a:	80 e5       	ldi	r24, 0x50	; 80
 21c:	93 ec       	ldi	r25, 0xC3	; 195
 21e:	fe 01       	movw	r30, r28
 220:	31 97       	sbiw	r30, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <main+0xbc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 224:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 226:	d9 f7       	brne	.-10     	; 0x21e <main+0xba>
 228:	b1 cf       	rjmp	.-158    	; 0x18c <main+0x28>
_delay_ms(5000);
	}
	else
	{
	PORTB=0X00;
 22a:	18 ba       	out	0x18, r1	; 24
	dis_cmd(0x80);
 22c:	80 e8       	ldi	r24, 0x80	; 128
 22e:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
	string_LCD("STOP    ");
 232:	87 e8       	ldi	r24, 0x87	; 135
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 99 00 	call	0x132	; 0x132 <string_LCD>
 23a:	80 e5       	ldi	r24, 0x50	; 80
 23c:	93 ec       	ldi	r25, 0xC3	; 195
 23e:	fe 01       	movw	r30, r28
 240:	31 97       	sbiw	r30, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <main+0xdc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 244:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 246:	d9 f7       	brne	.-10     	; 0x23e <main+0xda>
 248:	a1 cf       	rjmp	.-190    	; 0x18c <main+0x28>

0000024a <LCD_number>:
	dis_cmd(0x0c);
	dis_cmd(0x01);
}

void LCD_number(unsigned int value)
{	dis_cmd(0x04);//for decrementing the cursor position
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	ec 01       	movw	r28, r24
 250:	84 e0       	ldi	r24, 0x04	; 4
 252:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
 256:	0e c0       	rjmp	.+28     	; 0x274 <LCD_number+0x2a>
	unsigned int a=0;
	while(value!=0)
	{	a=value%10;
		dis_write(a+48);
 258:	ce 01       	movw	r24, r28
 25a:	6a e0       	ldi	r22, 0x0A	; 10
 25c:	70 e0       	ldi	r23, 0x00	; 0
 25e:	0e 94 42 01 	call	0x284	; 0x284 <__udivmodhi4>
 262:	80 5d       	subi	r24, 0xD0	; 208
 264:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_write>
		value=value/10;
 268:	ce 01       	movw	r24, r28
 26a:	6a e0       	ldi	r22, 0x0A	; 10
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	0e 94 42 01 	call	0x284	; 0x284 <__udivmodhi4>
 272:	eb 01       	movw	r28, r22
}

void LCD_number(unsigned int value)
{	dis_cmd(0x04);//for decrementing the cursor position
	unsigned int a=0;
	while(value!=0)
 274:	20 97       	sbiw	r28, 0x00	; 0
 276:	81 f7       	brne	.-32     	; 0x258 <LCD_number+0xe>
	{	a=value%10;
		dis_write(a+48);
		value=value/10;
	}
	dis_cmd(0x06);// for again incrementing the cursor position
 278:	86 e0       	ldi	r24, 0x06	; 6
 27a:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
}
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <__udivmodhi4>:
 284:	aa 1b       	sub	r26, r26
 286:	bb 1b       	sub	r27, r27
 288:	51 e1       	ldi	r21, 0x11	; 17
 28a:	07 c0       	rjmp	.+14     	; 0x29a <__udivmodhi4_ep>

0000028c <__udivmodhi4_loop>:
 28c:	aa 1f       	adc	r26, r26
 28e:	bb 1f       	adc	r27, r27
 290:	a6 17       	cp	r26, r22
 292:	b7 07       	cpc	r27, r23
 294:	10 f0       	brcs	.+4      	; 0x29a <__udivmodhi4_ep>
 296:	a6 1b       	sub	r26, r22
 298:	b7 0b       	sbc	r27, r23

0000029a <__udivmodhi4_ep>:
 29a:	88 1f       	adc	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	5a 95       	dec	r21
 2a0:	a9 f7       	brne	.-22     	; 0x28c <__udivmodhi4_loop>
 2a2:	80 95       	com	r24
 2a4:	90 95       	com	r25
 2a6:	bc 01       	movw	r22, r24
 2a8:	cd 01       	movw	r24, r26
 2aa:	08 95       	ret

000002ac <_exit>:
 2ac:	f8 94       	cli

000002ae <__stop_program>:
 2ae:	ff cf       	rjmp	.-2      	; 0x2ae <__stop_program>
