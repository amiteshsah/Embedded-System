
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  000002a6  0000031a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000034a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000099  00000000  00000000  0000036a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000054d  00000000  00000000  00000403  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001eb  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004e8  00000000  00000000  00000b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c0  00000000  00000000  00001024  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000129  00000000  00000000  000010e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000182  00000000  00000000  0000120d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000060  00000000  00000000  0000138f  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ea       	ldi	r30, 0xA6	; 166
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 39       	cpi	r26, 0x90	; 144
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e9       	ldi	r26, 0x90	; 144
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 39       	cpi	r26, 0x90	; 144
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  8a:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <cmd_LCD>:
return 0;
}


void cmd_LCD(unsigned char xyz)
{ 
  92:	85 bb       	out	0x15, r24	; 21
	LCD_data_cntrl=xyz;
	LCD_data_cntrl &=~ (1<<rs);
  94:	a8 98       	cbi	0x15, 0	; 21
	LCD_data_cntrl &=~ (1<<rw);
  96:	a9 98       	cbi	0x15, 1	; 21
	LCD_data_cntrl |= (1<<en);
  98:	aa 9a       	sbi	0x15, 2	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	8a ef       	ldi	r24, 0xFA	; 250
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <cmd_LCD+0xc>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
  a2:	aa 98       	cbi	0x15, 2	; 21
}
  a4:	08 95       	ret

000000a6 <write_LCD>:


void write_LCD(unsigned char abc)
{
  a6:	85 bb       	out	0x15, r24	; 21

	LCD_data_cntrl=abc;
	LCD_data_cntrl |= (1<<rs);
  a8:	a8 9a       	sbi	0x15, 0	; 21
	LCD_data_cntrl &=~ (1<<rw);
  aa:	a9 98       	cbi	0x15, 1	; 21
	LCD_data_cntrl |= (1<<en);
  ac:	aa 9a       	sbi	0x15, 2	; 21
  ae:	8a ef       	ldi	r24, 0xFA	; 250
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <write_LCD+0xc>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
  b6:	aa 98       	cbi	0x15, 2	; 21
}
  b8:	08 95       	ret

000000ba <dis_cmd>:


void dis_cmd(unsigned char cmd)
{ 
  ba:	28 2f       	mov	r18, r24
  bc:	20 7f       	andi	r18, 0xF0	; 240
}


void cmd_LCD(unsigned char xyz)
{ 
	LCD_data_cntrl=xyz;
  be:	25 bb       	out	0x15, r18	; 21
	LCD_data_cntrl &=~ (1<<rs);
  c0:	a8 98       	cbi	0x15, 0	; 21
	LCD_data_cntrl &=~ (1<<rw);
  c2:	a9 98       	cbi	0x15, 1	; 21
	LCD_data_cntrl |= (1<<en);
  c4:	aa 9a       	sbi	0x15, 2	; 21
  c6:	2a ef       	ldi	r18, 0xFA	; 250
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	f9 01       	movw	r30, r18
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <dis_cmd+0x12>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
  d0:	aa 98       	cbi	0x15, 2	; 21
void dis_cmd(unsigned char cmd)
{ 
unsigned char cmd1;
cmd1 = (cmd&0xf0);
cmd_LCD(cmd1);
cmd1 = ((cmd<<4)&0xf0);
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	44 e0       	ldi	r20, 0x04	; 4
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	4a 95       	dec	r20
  dc:	e1 f7       	brne	.-8      	; 0xd6 <dis_cmd+0x1c>
}


void cmd_LCD(unsigned char xyz)
{ 
	LCD_data_cntrl=xyz;
  de:	85 bb       	out	0x15, r24	; 21
	LCD_data_cntrl &=~ (1<<rs);
  e0:	a8 98       	cbi	0x15, 0	; 21
	LCD_data_cntrl &=~ (1<<rw);
  e2:	a9 98       	cbi	0x15, 1	; 21
	LCD_data_cntrl |= (1<<en);
  e4:	aa 9a       	sbi	0x15, 2	; 21
  e6:	c9 01       	movw	r24, r18
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <dis_cmd+0x2e>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
  ec:	aa 98       	cbi	0x15, 2	; 21
  ee:	c9 01       	movw	r24, r18
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <dis_cmd+0x36>
cmd1 = (cmd&0xf0);
cmd_LCD(cmd1);
cmd1 = ((cmd<<4)&0xf0);
cmd_LCD(cmd1);
_delay_ms(1);
}
  f4:	08 95       	ret

000000f6 <dis_write>:


void dis_write(unsigned char write)
{ 
  f6:	28 2f       	mov	r18, r24
  f8:	20 7f       	andi	r18, 0xF0	; 240


void write_LCD(unsigned char abc)
{

	LCD_data_cntrl=abc;
  fa:	25 bb       	out	0x15, r18	; 21
	LCD_data_cntrl |= (1<<rs);
  fc:	a8 9a       	sbi	0x15, 0	; 21
	LCD_data_cntrl &=~ (1<<rw);
  fe:	a9 98       	cbi	0x15, 1	; 21
	LCD_data_cntrl |= (1<<en);
 100:	aa 9a       	sbi	0x15, 2	; 21
 102:	2a ef       	ldi	r18, 0xFA	; 250
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	f9 01       	movw	r30, r18
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <dis_write+0x12>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
 10c:	aa 98       	cbi	0x15, 2	; 21
void dis_write(unsigned char write)
{ 
unsigned char write1;
write1 = (write&0xf0);
write_LCD(write1);
write1 = ((write<<4)&0xf0);
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	54 e0       	ldi	r21, 0x04	; 4
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	5a 95       	dec	r21
 118:	e1 f7       	brne	.-8      	; 0x112 <dis_write+0x1c>


void write_LCD(unsigned char abc)
{

	LCD_data_cntrl=abc;
 11a:	85 bb       	out	0x15, r24	; 21
	LCD_data_cntrl |= (1<<rs);
 11c:	a8 9a       	sbi	0x15, 0	; 21
	LCD_data_cntrl &=~ (1<<rw);
 11e:	a9 98       	cbi	0x15, 1	; 21
	LCD_data_cntrl |= (1<<en);
 120:	aa 9a       	sbi	0x15, 2	; 21
 122:	c9 01       	movw	r24, r18
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <dis_write+0x2e>
	_delay_ms(1);
	LCD_data_cntrl &=~ (1<<en);
 128:	aa 98       	cbi	0x15, 2	; 21
 12a:	c9 01       	movw	r24, r18
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <dis_write+0x36>
write1 = (write&0xf0);
write_LCD(write1);
write1 = ((write<<4)&0xf0);
write_LCD(write1);
_delay_ms(1);
}
 130:	08 95       	ret

00000132 <string_LCD>:

void string_LCD(unsigned char *str)
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	ec 01       	movw	r28, r24
 138:	02 c0       	rjmp	.+4      	; 0x13e <string_LCD+0xc>
	int i;
	
	for(i=0;str[i]!='\0';i++) 
	{	dis_write(str[i]);
 13a:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_write>

void string_LCD(unsigned char *str)
{
	int i;
	
	for(i=0;str[i]!='\0';i++) 
 13e:	89 91       	ld	r24, Y+
 140:	88 23       	and	r24, r24
 142:	d9 f7       	brne	.-10     	; 0x13a <string_LCD+0x8>
	{	dis_write(str[i]);
	 	
  	}
	return 0;
	}
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <lcd_init>:


void lcd_init(void)
{
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
	
	dis_cmd(0x02);
	dis_cmd(0x28);
 150:	88 e2       	ldi	r24, 0x28	; 40
 152:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
	dis_cmd(0x0c);
 156:	8c e0       	ldi	r24, 0x0C	; 12
 158:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
	dis_cmd(0x01);
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
}
 162:	08 95       	ret

00000164 <main>:
unsigned int getcha(void);



int main()
{
 164:	df 92       	push	r13
 166:	ef 92       	push	r14
 168:	ff 92       	push	r15
 16a:	0f 93       	push	r16
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
DDRB=0XFF;
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	87 bb       	out	0x17, r24	; 23
DDRD=0xFF;
 176:	81 bb       	out	0x11, r24	; 17
DDRC=0XFF;
 178:	84 bb       	out	0x14, r24	; 20
unsigned int x;
lcd_init();
 17a:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_init>
{
	UCSRB |= (1 << RXEN)|(1<<TXEN);   // Turn on the transmission and reception circuitry
	UCSRC |= (1 << URSEL) | (1<<USBS) | (1 << UCSZ0) | (1 << UCSZ1); 
											// Use 8-bit character sizes
 
	UBRRL = BAUD_PRESCALE; 
 17e:	e3 e3       	ldi	r30, 0x33	; 51
 180:	de 2e       	mov	r13, r30
 182:	c8 ea       	ldi	r28, 0xA8	; 168
 184:	d1 e6       	ldi	r29, 0x61	; 97
string_LCD("RIGHT    ");
_delay_ms(100);
}
else if(x=='d')
{
PORTB=0b00001000;
 186:	78 e0       	ldi	r23, 0x08	; 8
 188:	e7 2e       	mov	r14, r23
string_LCD("BACKWARD");
_delay_ms(100);
}
else if(x=='a')
{
PORTB=0b00000010;
 18a:	62 e0       	ldi	r22, 0x02	; 2
 18c:	f6 2e       	mov	r15, r22
string_LCD("FORWARD");
_delay_ms(100);
}
else if(x=='s')
{
PORTB=0b00000101;
 18e:	05 e0       	ldi	r16, 0x05	; 5
init();
x=getcha();
putcha(x);
if(x=='w')
{
PORTB=0b00001010;
 190:	1a e0       	ldi	r17, 0x0A	; 10



void init()
{
	UCSRB |= (1 << RXEN)|(1<<TXEN);   // Turn on the transmission and reception circuitry
 192:	8a b1       	in	r24, 0x0a	; 10
 194:	88 61       	ori	r24, 0x18	; 24
 196:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1<<USBS) | (1 << UCSZ0) | (1 << UCSZ1); 
 198:	80 b5       	in	r24, 0x20	; 32
 19a:	8e 68       	ori	r24, 0x8E	; 142
 19c:	80 bd       	out	0x20, r24	; 32
											// Use 8-bit character sizes
 
	UBRRL = BAUD_PRESCALE; 
 19e:	d9 b8       	out	0x09, r13	; 9
			// Load lower 8-bits of the baud rate value into the low byte of the UBRR register
	UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value..
 1a0:	10 bc       	out	0x20, r1	; 32
									// into the high byte of the UBRR register
}
 
unsigned int getcha()
{	unsigned int ret;
	while ((UCSRA & (1 << RXC)) == 0); 
 1a2:	5f 9b       	sbis	0x0b, 7	; 11
 1a4:	fe cf       	rjmp	.-4      	; 0x1a2 <main+0x3e>
	{	
	}	// Do nothing until data has been received and is ready to be read from UDR
	
	return UDR; // return the byte
 1a6:	2c b1       	in	r18, 0x0c	; 12
 1a8:	82 2f       	mov	r24, r18
 1aa:	90 e0       	ldi	r25, 0x00	; 0
}
 

void putcha(unsigned char send)
{	while(!(UCSRA & (1<<UDRE)))
 1ac:	5d 9b       	sbis	0x0b, 5	; 11
 1ae:	fe cf       	rjmp	.-4      	; 0x1ac <main+0x48>
   {
   }
   UDR=send;
 1b0:	2c b9       	out	0x0c, r18	; 12
while(1)
{
init();
x=getcha();
putcha(x);
if(x=='w')
 1b2:	87 37       	cpi	r24, 0x77	; 119
 1b4:	91 05       	cpc	r25, r1
 1b6:	39 f4       	brne	.+14     	; 0x1c6 <main+0x62>
{
PORTB=0b00001010;
 1b8:	18 bb       	out	0x18, r17	; 24
dis_cmd(0x80);
 1ba:	80 e8       	ldi	r24, 0x80	; 128
 1bc:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
string_LCD("FORWARD");
 1c0:	80 e6       	ldi	r24, 0x60	; 96
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	24 c0       	rjmp	.+72     	; 0x20e <main+0xaa>
_delay_ms(100);
}
else if(x=='s')
 1c6:	83 37       	cpi	r24, 0x73	; 115
 1c8:	91 05       	cpc	r25, r1
 1ca:	39 f4       	brne	.+14     	; 0x1da <main+0x76>
{
PORTB=0b00000101;
 1cc:	08 bb       	out	0x18, r16	; 24
dis_cmd(0x80);
 1ce:	80 e8       	ldi	r24, 0x80	; 128
 1d0:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
string_LCD("BACKWARD");
 1d4:	88 e6       	ldi	r24, 0x68	; 104
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	1a c0       	rjmp	.+52     	; 0x20e <main+0xaa>
_delay_ms(100);
}
else if(x=='a')
 1da:	81 36       	cpi	r24, 0x61	; 97
 1dc:	91 05       	cpc	r25, r1
 1de:	39 f4       	brne	.+14     	; 0x1ee <main+0x8a>
{
PORTB=0b00000010;
 1e0:	f8 ba       	out	0x18, r15	; 24
dis_cmd(0x80);
 1e2:	80 e8       	ldi	r24, 0x80	; 128
 1e4:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
string_LCD("RIGHT    ");
 1e8:	81 e7       	ldi	r24, 0x71	; 113
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	10 c0       	rjmp	.+32     	; 0x20e <main+0xaa>
_delay_ms(100);
}
else if(x=='d')
 1ee:	84 36       	cpi	r24, 0x64	; 100
 1f0:	91 05       	cpc	r25, r1
 1f2:	39 f4       	brne	.+14     	; 0x202 <main+0x9e>
{
PORTB=0b00001000;
 1f4:	e8 ba       	out	0x18, r14	; 24
dis_cmd(0X80);
 1f6:	80 e8       	ldi	r24, 0x80	; 128
 1f8:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
string_LCD("LEFT     ");
 1fc:	8b e7       	ldi	r24, 0x7B	; 123
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	06 c0       	rjmp	.+12     	; 0x20e <main+0xaa>
_delay_ms(100);
}
else
{
PORTB=0X00;
 202:	18 ba       	out	0x18, r1	; 24
dis_cmd(0X80);
 204:	80 e8       	ldi	r24, 0x80	; 128
 206:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
string_LCD("STOP     ");
 20a:	85 e8       	ldi	r24, 0x85	; 133
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 99 00 	call	0x132	; 0x132 <string_LCD>
 212:	ce 01       	movw	r24, r28
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <main+0xb0>
 218:	bc cf       	rjmp	.-136    	; 0x192 <main+0x2e>

0000021a <LCD_number>:
	dis_cmd(0x0c);
	dis_cmd(0x01);
}

void LCD_number(unsigned int value)
{	dis_cmd(0x04);//for decrementing the cursor position
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	ec 01       	movw	r28, r24
 220:	84 e0       	ldi	r24, 0x04	; 4
 222:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
 226:	0e c0       	rjmp	.+28     	; 0x244 <LCD_number+0x2a>
	unsigned int a=0;
	while(value!=0)
	{	a=value%10;
		dis_write(a+48);
 228:	ce 01       	movw	r24, r28
 22a:	6a e0       	ldi	r22, 0x0A	; 10
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	0e 94 3d 01 	call	0x27a	; 0x27a <__udivmodhi4>
 232:	80 5d       	subi	r24, 0xD0	; 208
 234:	0e 94 7b 00 	call	0xf6	; 0xf6 <dis_write>
		value=value/10;
 238:	ce 01       	movw	r24, r28
 23a:	6a e0       	ldi	r22, 0x0A	; 10
 23c:	70 e0       	ldi	r23, 0x00	; 0
 23e:	0e 94 3d 01 	call	0x27a	; 0x27a <__udivmodhi4>
 242:	eb 01       	movw	r28, r22
}

void LCD_number(unsigned int value)
{	dis_cmd(0x04);//for decrementing the cursor position
	unsigned int a=0;
	while(value!=0)
 244:	20 97       	sbiw	r28, 0x00	; 0
 246:	81 f7       	brne	.-32     	; 0x228 <LCD_number+0xe>
	{	a=value%10;
		dis_write(a+48);
		value=value/10;
	}
	dis_cmd(0x06);// for again incrementing the cursor position
 248:	86 e0       	ldi	r24, 0x06	; 6
 24a:	0e 94 5d 00 	call	0xba	; 0xba <dis_cmd>
}
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <init>:



void init()
{
 254:	8a b1       	in	r24, 0x0a	; 10
 256:	88 61       	ori	r24, 0x18	; 24
 258:	8a b9       	out	0x0a, r24	; 10
	UCSRB |= (1 << RXEN)|(1<<TXEN);   // Turn on the transmission and reception circuitry
	UCSRC |= (1 << URSEL) | (1<<USBS) | (1 << UCSZ0) | (1 << UCSZ1); 
 25a:	80 b5       	in	r24, 0x20	; 32
 25c:	8e 68       	ori	r24, 0x8E	; 142
 25e:	80 bd       	out	0x20, r24	; 32
											// Use 8-bit character sizes
 
	UBRRL = BAUD_PRESCALE; 
 260:	83 e3       	ldi	r24, 0x33	; 51
 262:	89 b9       	out	0x09, r24	; 9
			// Load lower 8-bits of the baud rate value into the low byte of the UBRR register
	UBRRH = (BAUD_PRESCALE >> 8); // Load upper 8-bits of the baud rate value..
 264:	10 bc       	out	0x20, r1	; 32
									// into the high byte of the UBRR register
}
 266:	08 95       	ret

00000268 <getcha>:
 
unsigned int getcha()
{	unsigned int ret;
 268:	5f 9b       	sbis	0x0b, 7	; 11
 26a:	fe cf       	rjmp	.-4      	; 0x268 <getcha>
	while ((UCSRA & (1 << RXC)) == 0); 
	{	
	}	// Do nothing until data has been received and is ready to be read from UDR
	
	return UDR; // return the byte
 26c:	8c b1       	in	r24, 0x0c	; 12
}
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	08 95       	ret

00000272 <putcha>:
 

void putcha(unsigned char send)
{	while(!(UCSRA & (1<<UDRE)))
 272:	5d 9b       	sbis	0x0b, 5	; 11
 274:	fe cf       	rjmp	.-4      	; 0x272 <putcha>
   {
   }
   UDR=send;
 276:	8c b9       	out	0x0c, r24	; 12
}
 278:	08 95       	ret

0000027a <__udivmodhi4>:
 27a:	aa 1b       	sub	r26, r26
 27c:	bb 1b       	sub	r27, r27
 27e:	51 e1       	ldi	r21, 0x11	; 17
 280:	07 c0       	rjmp	.+14     	; 0x290 <__udivmodhi4_ep>

00000282 <__udivmodhi4_loop>:
 282:	aa 1f       	adc	r26, r26
 284:	bb 1f       	adc	r27, r27
 286:	a6 17       	cp	r26, r22
 288:	b7 07       	cpc	r27, r23
 28a:	10 f0       	brcs	.+4      	; 0x290 <__udivmodhi4_ep>
 28c:	a6 1b       	sub	r26, r22
 28e:	b7 0b       	sbc	r27, r23

00000290 <__udivmodhi4_ep>:
 290:	88 1f       	adc	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	5a 95       	dec	r21
 296:	a9 f7       	brne	.-22     	; 0x282 <__udivmodhi4_loop>
 298:	80 95       	com	r24
 29a:	90 95       	com	r25
 29c:	bc 01       	movw	r22, r24
 29e:	cd 01       	movw	r24, r26
 2a0:	08 95       	ret

000002a2 <_exit>:
 2a2:	f8 94       	cli

000002a4 <__stop_program>:
 2a4:	ff cf       	rjmp	.-2      	; 0x2a4 <__stop_program>
